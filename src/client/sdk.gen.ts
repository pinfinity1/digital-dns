// This file is auto-generated by @hey-api/openapi-ts

import {
  type Client,
  formDataBodySerializer,
  type Options as ClientOptions,
  type TDataShape,
} from "@hey-api/client-axios";
import type {
  DeleteApiV1MarzbanDeleteMarzbanServerNodeData,
  DeleteApiV1MarzbanDeleteMarzbanServerNodeError,
  DeleteApiV1MarzbanDeleteMarzbanServerNodeResponse,
  DeleteApiV1SanaeiDeleteInboundData,
  DeleteApiV1SanaeiDeleteInboundError,
  DeleteApiV1SanaeiDeleteInboundResponse,
  GetApiV1AgentAgencyInformationData,
  GetApiV1AgentAgencyInformationError,
  GetApiV1AgentAgencyInformationResponse,
  GetApiV1AgentAgentsReachedNegativeLimitData,
  GetApiV1AgentAgentsReachedNegativeLimitResponse,
  GetApiV1AgentAgentsReachedNegativeNotLimitData,
  GetApiV1AgentAgentsReachedNegativeNotLimitResponse,
  GetApiV1AgentFilterAgentsData,
  GetApiV1AgentFilterAgentsError,
  GetApiV1AgentFilterAgentsResponse,
  GetApiV1AgentGetAdminAgentInformationData,
  GetApiV1AgentGetAdminAgentInformationError,
  GetApiV1AgentGetAdminAgentInformationResponse,
  GetApiV1AgentGetAgentByCodeByCodeData,
  GetApiV1AgentGetAgentByCodeByCodeError,
  GetApiV1AgentGetAgentByCodeByCodeResponse,
  GetApiV1AgentGetAgentByIdData,
  GetApiV1AgentGetAgentByIdError,
  GetApiV1AgentGetAgentByIdResponse,
  GetApiV1AgentGetAgentInformationData,
  GetApiV1AgentGetAgentInformationError,
  GetApiV1AgentGetAgentInformationPaymentData,
  GetApiV1AgentGetAgentInformationPaymentError,
  GetApiV1AgentGetAgentInformationPaymentResponse,
  GetApiV1AgentGetAgentInformationResponse,
  GetApiV1AgentGetAgentRequestsData,
  GetApiV1AgentGetAgentRequestsError,
  GetApiV1AgentGetAgentRequestsResponse,
  GetApiV1AgentGetAgentsData,
  GetApiV1AgentGetAgentsError,
  GetApiV1AgentGetAgentsResponse,
  GetApiV1AgentGetAgentStatusData,
  GetApiV1AgentGetAgentStatusError,
  GetApiV1AgentGetAgentStatusResponse,
  GetApiV1AgentGetAgentTreeData,
  GetApiV1AgentGetAgentTreeError,
  GetApiV1AgentGetAgentTreeResponse,
  GetApiV1AgentGetUserAgentData,
  GetApiV1AgentGetUserAgentError,
  GetApiV1AgentGetUserAgentResponse,
  GetApiV1AgentInputUserReportData,
  GetApiV1AgentInputUserReportError,
  GetApiV1AgentInputUserReportResponse,
  GetApiV1AgentProfitReportData,
  GetApiV1AgentProfitReportError,
  GetApiV1AgentProfitReportResponse,
  GetApiV1AppleFilterAppleIdData,
  GetApiV1AppleFilterAppleIdError,
  GetApiV1AppleFilterAppleIdResponse,
  GetApiV1AppleGetAppleIdByIdByIdData,
  GetApiV1AppleGetAppleIdByIdByIdError,
  GetApiV1AppleGetAppleIdByIdByIdResponse,
  GetApiV1AppleGetAppleIdTypeData,
  GetApiV1AppleGetAppleIdTypeError,
  GetApiV1AppleGetAppleIdTypeResponse,
  GetApiV1AuthorizationGetAllPermissionsPermissionsData,
  GetApiV1AuthorizationGetAllPermissionsPermissionsResponse,
  GetApiV1AuthorizationGetAllRolesRolesData,
  GetApiV1AuthorizationGetAllRolesRolesResponse,
  GetApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsData,
  GetApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsResponse,
  GetApiV1AuthorizationGetRolesForUserUserByUserIdRolesData,
  GetApiV1AuthorizationGetRolesForUserUserByUserIdRolesResponse,
  GetApiV1AuthorizationGetUserRolePermissionsData,
  GetApiV1AuthorizationGetUserRolePermissionsResponse,
  GetApiV1CountryGetCountrisData,
  GetApiV1CountryGetCountrisError,
  GetApiV1CountryGetCountrisResponse,
  GetApiV1DockerGetDockerData,
  GetApiV1MarzbanGetMarzbanInboudsData,
  GetApiV1MarzbanGetMarzbanInboudsError,
  GetApiV1MarzbanGetMarzbanInboudsResponse,
  GetApiV1MarzbanGetMarzbanServerCoreConfigData,
  GetApiV1MarzbanGetMarzbanServerCoreConfigError,
  GetApiV1MarzbanGetMarzbanServerCoreConfigResponse,
  GetApiV1MarzbanGetMarzbanServerData,
  GetApiV1MarzbanGetMarzbanServerError,
  GetApiV1MarzbanGetMarzbanServerNodeByIdData,
  GetApiV1MarzbanGetMarzbanServerNodeByIdError,
  GetApiV1MarzbanGetMarzbanServerNodeByIdResponse,
  GetApiV1MarzbanGetMarzbanServerNodesData,
  GetApiV1MarzbanGetMarzbanServerNodesError,
  GetApiV1MarzbanGetMarzbanServerNodeSettingsData,
  GetApiV1MarzbanGetMarzbanServerNodeSettingsError,
  GetApiV1MarzbanGetMarzbanServerNodeSettingsResponse,
  GetApiV1MarzbanGetMarzbanServerNodesResponse,
  GetApiV1MarzbanGetMarzbanServerResponse,
  GetApiV1MarzbanGetMarzbanServersData,
  GetApiV1MarzbanGetMarzbanServersError,
  GetApiV1MarzbanGetMarzbanServersResponse,
  GetApiV1MarzbanGetMarzbanVpnData,
  GetApiV1MarzbanGetMarzbanVpnResponse,
  GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdData,
  GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdError,
  GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdResponse,
  GetApiV1MarzbanPortocolsData,
  GetApiV1MarzbanPortocolsResponse,
  GetApiV1MenuGetAllMenusData,
  GetApiV1MenuGetAllMenusError,
  GetApiV1MenuGetAllMenusResponse,
  GetApiV1MenuGetMenusData,
  GetApiV1MenuGetMenusError,
  GetApiV1MenuGetMenusResponse,
  GetApiV1NotificationGetNotificationsData,
  GetApiV1NotificationGetNotificationsError,
  GetApiV1NotificationGetNotificationsResponse,
  GetApiV1NotificationGetNotificationTypeData,
  GetApiV1NotificationGetNotificationTypeError,
  GetApiV1NotificationGetNotificationTypeResponse,
  GetApiV1OrderFilterOrderData,
  GetApiV1OrderFilterOrderError,
  GetApiV1OrderFilterOrderResponse,
  GetApiV1OrderFilterUserOrderData,
  GetApiV1OrderFilterUserOrderError,
  GetApiV1OrderFilterUserOrderResponse,
  GetApiV1ProductGetProductByFilterData,
  GetApiV1ProductGetProductByFilterResponse,
  GetApiV1RegistryFilterAllData,
  GetApiV1RegistryFilterAllError,
  GetApiV1RegistryFilterAllResponse,
  GetApiV1RegistryFilterData,
  GetApiV1RegistryFilterError,
  GetApiV1RegistryFilterResponse,
  GetApiV1SanaeiGetInboundsByIdData,
  GetApiV1SanaeiGetInboundsByIdError,
  GetApiV1SanaeiGetInboundsByIdResponse,
  GetApiV1SanaeiGetInboundsListData,
  GetApiV1SanaeiGetInboundsListError,
  GetApiV1SanaeiGetInboundsListResponse,
  GetApiV1ServerFilterServersData,
  GetApiV1ServerFilterServersError,
  GetApiV1ServerFilterServersResponse,
  GetApiV1ServerGetServerByIdData,
  GetApiV1ServerGetServerByIdError,
  GetApiV1ServerGetServerByIdResponse,
  GetApiV1ServerGetServersData,
  GetApiV1ServerGetServersError,
  GetApiV1ServerGetServersResponse,
  GetApiV1TransactionFilterTransactionData,
  GetApiV1TransactionFilterTransactionError,
  GetApiV1TransactionFilterTransactionResponse,
  GetApiV1TransactionGetTransactionByIdData,
  GetApiV1TransactionGetTransactionByIdError,
  GetApiV1TransactionGetTransactionByIdResponse,
  GetApiV1TransactionGetTransactionDetailData,
  GetApiV1TransactionGetTransactionDetailError,
  GetApiV1TransactionGetTransactionDetailResponse,
  GetApiV1UserGetAgentUsersData,
  GetApiV1UserGetAgentUsersError,
  GetApiV1UserGetAgentUsersFilterData,
  GetApiV1UserGetAgentUsersFilterResponse,
  GetApiV1UserGetAgentUsersResponse,
  GetApiV1UserGetInformationData,
  GetApiV1UserGetInformationError,
  GetApiV1UserGetInformationResponse,
  GetApiV1UserGetMeData,
  GetApiV1UserGetMeError,
  GetApiV1UserGetMeResponse,
  GetApiV1UserGetUserByIdData,
  GetApiV1UserGetUserByIdError,
  GetApiV1UserGetUserByIdResponse,
  GetApiV1UserGetUsersByFilterData,
  GetApiV1UserGetUsersByFilterResponse,
  GetApiV1VpnGetVpnsData,
  GetApiV1VpnGetVpnsError,
  GetApiV1VpnGetVpnsResponse,
  PostApiV1AgentAddAgentData,
  PostApiV1AgentAddAgentError,
  PostApiV1AgentAddAgentResponse,
  PostApiV1AgentAddRequestForAgentData,
  PostApiV1AgentAddRequestForAgentError,
  PostApiV1AgentAddRequestForAgentResponse,
  PostApiV1AppleAddAppleIdData,
  PostApiV1AppleAddAppleIdError,
  PostApiV1AppleAddAppleIdResponse,
  PostApiV1CategoryAddCategoryData,
  PostApiV1CategoryAddCategoryError,
  PostApiV1CategoryAddCategoryResponse,
  PostApiV1CategoryGetCategoriesData,
  PostApiV1CategoryGetCategoriesError,
  PostApiV1CategoryGetCategoriesResponse,
  PostApiV1CategoryGetCategoryData,
  PostApiV1CategoryGetCategoryError,
  PostApiV1CategoryGetCategoryResponse,
  PostApiV1CountryAddCountryData,
  PostApiV1CountryAddCountryError,
  PostApiV1CountryAddCountryResponse,
  PostApiV1MarzbanAddMarzbanServerData,
  PostApiV1MarzbanAddMarzbanServerError,
  PostApiV1MarzbanAddMarzbanServerResponse,
  PostApiV1MarzbanAddMarzbanVpnData,
  PostApiV1MarzbanAddMarzbanVpnError,
  PostApiV1MarzbanAddMarzbanVpnResponse,
  PostApiV1MarzbanAddMarzbanVpnTemplateData,
  PostApiV1MarzbanAddMarzbanVpnTemplateError,
  PostApiV1MarzbanAddMarzbanVpnTemplateResponse,
  PostApiV1MarzbanBuyMarzbanVpnData,
  PostApiV1MarzbanBuyMarzbanVpnError,
  PostApiV1MarzbanBuyMarzbanVpnResponse,
  PostApiV1MarzbanGetMarzbanServerNodeSettingsData,
  PostApiV1MarzbanGetMarzbanServerNodeSettingsError,
  PostApiV1MarzbanGetMarzbanServerNodeSettingsResponse,
  PostApiV1MarzbanGetMarzbanUserData,
  PostApiV1MarzbanGetMarzbanUserError,
  PostApiV1MarzbanGetMarzbanUserResponse,
  PostApiV1MarzbanReasetMarzbanServerCoreData,
  PostApiV1MarzbanReasetMarzbanServerCoreError,
  PostApiV1MarzbanReasetMarzbanServerCoreResponse,
  PostApiV1MenuAddMenusData,
  PostApiV1MenuAddMenusError,
  PostApiV1MenuAddMenusResponse,
  PostApiV1NotificationAddNotificationData,
  PostApiV1NotificationAddNotificationError,
  PostApiV1NotificationAddNotificationResponse,
  PostApiV1OrderAddOrderData,
  PostApiV1OrderAddOrderError,
  PostApiV1OrderAddOrderResponse,
  PostApiV1ProductAddProductData,
  PostApiV1ProductAddProductResponse,
  PostApiV1ProductAddVpnProductData,
  PostApiV1ProductAddVpnProductResponse,
  PostApiV1RegistryAddData,
  PostApiV1RegistryAddError,
  PostApiV1RegistryAddResponse,
  PostApiV1RegistryUploadRegistryTransactionImagesData,
  PostApiV1RegistryUploadRegistryTransactionImagesError,
  PostApiV1RegistryUploadRegistryTransactionImagesResponse,
  PostApiV1SanaeiAddInboundData,
  PostApiV1SanaeiAddInboundError,
  PostApiV1SanaeiAddInboundResponse,
  PostApiV1SanaeiGetClientConfigData,
  PostApiV1SanaeiGetClientConfigResponse,
  PostApiV1ServerAddServerData,
  PostApiV1ServerAddServerError,
  PostApiV1ServerAddServerResponse,
  PostApiV1TelegramAddTelegramBotData,
  PostApiV1TelegramAddTelegramBotError,
  PostApiV1TelegramAddTelegramBotResponse,
  PostApiV1TransactionAddTransactionData,
  PostApiV1TransactionAddTransactionDetailData,
  PostApiV1TransactionAddTransactionDetailError,
  PostApiV1TransactionAddTransactionDetailResponse,
  PostApiV1TransactionAddTransactionError,
  PostApiV1TransactionAddTransactionResponse,
  PostApiV1TransactionDecreaseBalanceByUserIdData,
  PostApiV1TransactionDecreaseBalanceByUserIdError,
  PostApiV1TransactionDecreaseBalanceByUserIdResponse,
  PostApiV1TransactionIncreaseBalanceByUserIdData,
  PostApiV1TransactionIncreaseBalanceByUserIdError,
  PostApiV1TransactionIncreaseBalanceByUserIdResponse,
  PostApiV1UserAddUserData,
  PostApiV1UserAddUserError,
  PostApiV1UserAddUserResponse,
  PostApiV1UserForgetPasswordData,
  PostApiV1UserForgetPasswordError,
  PostApiV1UserForgetPasswordResponse,
  PostApiV1UserLoginData,
  PostApiV1UserLoginError,
  PostApiV1UserLoginResponse,
  PostApiV1UserRegisterData,
  PostApiV1UserRegisterError,
  PostApiV1UserRegisterResponse,
  PostApiV1UserSendMobileActiveCodeData,
  PostApiV1UserSendMobileActiveCodeError,
  PostApiV1UserSendMobileActiveCodeResponse,
  PostApiV1VpnBuyVpnData,
  PostApiV1VpnBuyVpnResponse,
  PostByTokenData,
  PutApiV1AgentChangeRequestStatusData,
  PutApiV1AgentChangeRequestStatusError,
  PutApiV1AgentChangeRequestStatusResponse,
  PutApiV1AgentUpdateData,
  PutApiV1AgentUpdateError,
  PutApiV1AgentUpdateResponse,
  PutApiV1AppleUpdateAppleIdData,
  PutApiV1AppleUpdateAppleIdResponse,
  PutApiV1AuthorizationUpdateRolePermissionsRolePermissionsData,
  PutApiV1AuthorizationUpdateRolePermissionsRolePermissionsResponse,
  PutApiV1AuthorizationUpdateUserRolesUserRolesData,
  PutApiV1AuthorizationUpdateUserRolesUserRolesResponse,
  PutApiV1MarzbanUpdateMarzbanServerCoreConfigData,
  PutApiV1MarzbanUpdateMarzbanServerCoreConfigError,
  PutApiV1MarzbanUpdateMarzbanServerCoreConfigResponse,
  PutApiV1MarzbanUpdateMarzbanServerNodeData,
  PutApiV1MarzbanUpdateMarzbanServerNodeError,
  PutApiV1MarzbanUpdateMarzbanServerNodeResponse,
  PutApiV1RegistryUpdateData,
  PutApiV1RegistryUpdateError,
  PutApiV1RegistryUpdateResponse,
  PutApiV1SanaeiUpdateInboundData,
  PutApiV1SanaeiUpdateInboundError,
  PutApiV1SanaeiUpdateInboundResponse,
  PutApiV1TelegramStartTelegramBotByIdData,
  PutApiV1TelegramStartTelegramBotByIdResponse,
  PutApiV1TelegramStopTelegramBotByIdData,
  PutApiV1TelegramStopTelegramBotByIdResponse,
  PutApiV1TransactionUpdateTransactionStatusData,
  PutApiV1TransactionUpdateTransactionStatusError,
  PutApiV1TransactionUpdateTransactionStatusResponse,
  PutApiV1UserUpdateProfileData,
  PutApiV1UserUpdateProfileError,
  PutApiV1UserUpdateProfileResponse,
  PutApiV1UserUpdateUserData,
  PutApiV1UserUpdateUserError,
  PutApiV1UserUpdateUserResponse,
} from "./types.gen";
import {
  getApiV1AgentAgencyInformationResponseTransformer,
  getApiV1AgentAgentsReachedNegativeLimitResponseTransformer,
  getApiV1AgentAgentsReachedNegativeNotLimitResponseTransformer,
  getApiV1AgentGetAgentRequestsResponseTransformer,
  getApiV1AgentInputUserReportResponseTransformer,
  getApiV1AgentProfitReportResponseTransformer,
  getApiV1AppleFilterAppleIdResponseTransformer,
  getApiV1AppleGetAppleIdByIdByIdResponseTransformer,
  getApiV1AppleGetAppleIdTypeResponseTransformer,
  getApiV1AuthorizationGetAllPermissionsPermissionsResponseTransformer,
  getApiV1AuthorizationGetAllRolesRolesResponseTransformer,
  getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsResponseTransformer,
  getApiV1AuthorizationGetRolesForUserUserByUserIdRolesResponseTransformer,
  getApiV1AuthorizationGetUserRolePermissionsResponseTransformer,
  getApiV1CountryGetCountrisResponseTransformer,
  getApiV1MarzbanGetMarzbanServerNodeByIdResponseTransformer,
  getApiV1MarzbanGetMarzbanServerNodesResponseTransformer,
  getApiV1MarzbanGetMarzbanServerResponseTransformer,
  getApiV1MarzbanGetMarzbanServersResponseTransformer,
  getApiV1MarzbanGetMarzbanVpnResponseTransformer,
  getApiV1MarzbanGetMarzbanVpnTemplateByVpnIdResponseTransformer,
  getApiV1NotificationGetNotificationsResponseTransformer,
  getApiV1OrderFilterOrderResponseTransformer,
  getApiV1OrderFilterUserOrderResponseTransformer,
  getApiV1ProductGetProductByFilterResponseTransformer,
  getApiV1RegistryFilterAllResponseTransformer,
  getApiV1RegistryFilterResponseTransformer,
  getApiV1SanaeiGetInboundsByIdResponseTransformer,
  getApiV1SanaeiGetInboundsListResponseTransformer,
  getApiV1ServerFilterServersResponseTransformer,
  getApiV1ServerGetServersResponseTransformer,
  getApiV1TransactionFilterTransactionResponseTransformer,
  getApiV1TransactionGetTransactionByIdResponseTransformer,
  getApiV1TransactionGetTransactionDetailResponseTransformer,
  getApiV1UserGetAgentUsersFilterResponseTransformer,
  getApiV1UserGetUsersByFilterResponseTransformer,
  getApiV1VpnGetVpnsResponseTransformer,
  postApiV1AppleAddAppleIdResponseTransformer,
  postApiV1CategoryGetCategoriesResponseTransformer,
  postApiV1CategoryGetCategoryResponseTransformer,
  postApiV1MarzbanGetMarzbanServerNodeSettingsResponseTransformer,
  postApiV1TelegramAddTelegramBotResponseTransformer,
  putApiV1MarzbanUpdateMarzbanServerNodeResponseTransformer,
} from "./transformers.gen";
import {client as _heyApiClient} from "./client.gen";


export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getApiV1AgentAgentsReachedNegativeLimit = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AgentAgentsReachedNegativeLimitData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentAgentsReachedNegativeLimitResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1AgentAgentsReachedNegativeLimitResponseTransformer,
        url: "/api/v1/Agent/AgentsReachedNegativeLimit",
        ...options,
    });
};

export const getApiV1AgentAgentsReachedNegativeNotLimit = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        GetApiV1AgentAgentsReachedNegativeNotLimitData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentAgentsReachedNegativeNotLimitResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1AgentAgentsReachedNegativeNotLimitResponseTransformer,
        url: "/api/v1/Agent/AgentsReachedNegativeNotLimit",
        ...options,
    });
};

export const getApiV1AgentAgencyInformation = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AgentAgencyInformationData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentAgencyInformationResponse,
        GetApiV1AgentAgencyInformationError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1AgentAgencyInformationResponseTransformer,
        url: "/api/v1/Agent/AgencyInformation",
        ...options,
    });
};

export const getApiV1AgentGetAgentTree = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1AgentGetAgentTreeData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentGetAgentTreeResponse,
        GetApiV1AgentGetAgentTreeError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/GetAgentTree",
        ...options,
    });
};

export const getApiV1AgentGetAdminAgentInformation = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AgentGetAdminAgentInformationData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentGetAdminAgentInformationResponse,
        GetApiV1AgentGetAdminAgentInformationError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/GetAdminAgentInformation",
        ...options,
    });
};

export const getApiV1AgentGetAgentByCodeByCode = <
    ThrowOnError extends boolean = false,
> (
    options: Options<GetApiV1AgentGetAgentByCodeByCodeData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetApiV1AgentGetAgentByCodeByCodeResponse,
        GetApiV1AgentGetAgentByCodeByCodeError,
        ThrowOnError
    >({
        responseType: "text",
        
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/GetAgentByCode/{code}",
        ...options,
    });
};

export const getApiV1AgentGetUserAgent = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1AgentGetUserAgentData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentGetUserAgentResponse,
        GetApiV1AgentGetUserAgentError,
        ThrowOnError
    >({
        responseType: "text",
        
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/GetUserAgent",
        ...options,
    });
};

export const getApiV1AgentGetAgentById = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1AgentGetAgentByIdData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentGetAgentByIdResponse,
        GetApiV1AgentGetAgentByIdError,
        ThrowOnError
    >({
        responseType: "text",
        
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/GetAgentById",
        ...options,
    });
};

export const getApiV1AgentGetAgents = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1AgentGetAgentsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentGetAgentsResponse,
        GetApiV1AgentGetAgentsError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/GetAgents",
        ...options,
    });
};

export const getApiV1AgentGetAgentInformation = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AgentGetAgentInformationData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentGetAgentInformationResponse,
        GetApiV1AgentGetAgentInformationError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/GetAgentInformation",
        ...options,
    });
};

export const getApiV1AgentGetAgentInformationPayment = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AgentGetAgentInformationPaymentData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentGetAgentInformationPaymentResponse,
        GetApiV1AgentGetAgentInformationPaymentError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/GetAgentInformationPayment",
        ...options,
    });
};

export const getApiV1AgentGetAgentRequests = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AgentGetAgentRequestsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentGetAgentRequestsResponse,
        GetApiV1AgentGetAgentRequestsError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1AgentGetAgentRequestsResponseTransformer,
        url: "/api/v1/Agent/GetAgentRequests",
        ...options,
    });
};

export const getApiV1AgentFilterAgents = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1AgentFilterAgentsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentFilterAgentsResponse,
        GetApiV1AgentFilterAgentsError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/FilterAgents",
        ...options,
    });
};

export const getApiV1AgentGetAgentStatus = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AgentGetAgentStatusData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentGetAgentStatusResponse,
        GetApiV1AgentGetAgentStatusError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/GetAgentStatus",
        ...options,
    });
};

export const postApiV1AgentAddAgent = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1AgentAddAgentData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1AgentAddAgentResponse,
        PostApiV1AgentAddAgentError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/AddAgent",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1AgentAddRequestForAgent = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1AgentAddRequestForAgentData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1AgentAddRequestForAgentResponse,
        PostApiV1AgentAddRequestForAgentError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/AddRequestForAgent",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const putApiV1AgentChangeRequestStatus = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PutApiV1AgentChangeRequestStatusData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1AgentChangeRequestStatusResponse,
        PutApiV1AgentChangeRequestStatusError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/ChangeRequestStatus",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const putApiV1AgentUpdate = <ThrowOnError extends boolean = false> (
    options?: Options<PutApiV1AgentUpdateData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1AgentUpdateResponse,
        PutApiV1AgentUpdateError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Agent/Update",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1AgentProfitReport = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1AgentProfitReportData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentProfitReportResponse,
        GetApiV1AgentProfitReportError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1AgentProfitReportResponseTransformer,
        url: "/api/v1/Agent/ProfitReport",
        ...options,
    });
};

export const getApiV1AgentInputUserReport = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AgentInputUserReportData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AgentInputUserReportResponse,
        GetApiV1AgentInputUserReportError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1AgentInputUserReportResponseTransformer,
        url: "/api/v1/Agent/InputUserReport",
        ...options,
    });
};

export const getApiV1AppleGetAppleIdType = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AppleGetAppleIdTypeData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AppleGetAppleIdTypeResponse,
        GetApiV1AppleGetAppleIdTypeError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1AppleGetAppleIdTypeResponseTransformer,
        url: "/api/v1/Apple/GetAppleIdType",
        ...options,
    });
};

export const getApiV1AppleFilterAppleId = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AppleFilterAppleIdData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AppleFilterAppleIdResponse,
        GetApiV1AppleFilterAppleIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1AppleFilterAppleIdResponseTransformer,
        url: "/api/v1/Apple/FilterAppleId",
        ...options,
    });
};

export const postApiV1AppleAddAppleId = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1AppleAddAppleIdData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1AppleAddAppleIdResponse,
        PostApiV1AppleAddAppleIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: postApiV1AppleAddAppleIdResponseTransformer,
        url: "/api/v1/Apple/AddAppleId",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1AppleGetAppleIdByIdById = <
    ThrowOnError extends boolean = false,
> (
    options: Options<GetApiV1AppleGetAppleIdByIdByIdData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetApiV1AppleGetAppleIdByIdByIdResponse,
        GetApiV1AppleGetAppleIdByIdByIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1AppleGetAppleIdByIdByIdResponseTransformer,
        url: "/api/v1/Apple/GetAppleIdById/{id}",
        ...options,
    });
};

export const putApiV1AppleUpdateAppleId = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PutApiV1AppleUpdateAppleIdData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1AppleUpdateAppleIdResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Apple/UpdateAppleId",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1AuthorizationGetUserRolePermissions = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        GetApiV1AuthorizationGetUserRolePermissionsData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AuthorizationGetUserRolePermissionsResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1AuthorizationGetUserRolePermissionsResponseTransformer,
        url: "/api/v1/Authorization/GetUserRolePermissions",
        ...options,
    });
};

export const putApiV1AuthorizationUpdateUserRolesUserRoles = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        PutApiV1AuthorizationUpdateUserRolesUserRolesData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1AuthorizationUpdateUserRolesUserRolesResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Authorization/UpdateUserRoles/user/roles",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const putApiV1AuthorizationUpdateRolePermissionsRolePermissions = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        PutApiV1AuthorizationUpdateRolePermissionsRolePermissionsData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1AuthorizationUpdateRolePermissionsRolePermissionsResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Authorization/UpdateRolePermissions/role/permissions",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1AuthorizationGetRolesForUserUserByUserIdRoles = <
    ThrowOnError extends boolean = false,
> (
    options: Options<
        GetApiV1AuthorizationGetRolesForUserUserByUserIdRolesData,
        ThrowOnError
    >,
) => {
    return (options.client ?? _heyApiClient).get<
        GetApiV1AuthorizationGetRolesForUserUserByUserIdRolesResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1AuthorizationGetRolesForUserUserByUserIdRolesResponseTransformer,
        url: "/api/v1/Authorization/GetRolesForUser/user/{userId}/roles",
        ...options,
    });
};

export const getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissions =
    <ThrowOnError extends boolean = false> (
        options: Options<
            GetApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsData,
            ThrowOnError
        >,
    ) => {
        return (options.client ?? _heyApiClient).get<
            GetApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsResponse,
            unknown,
            ThrowOnError
        >({
            responseType: "text",
            security: [
                {
                    name: "Authorization",
                    type: "apiKey",
                },
            ],
            responseTransformer:
            getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsResponseTransformer,
            url: "/api/v1/Authorization/GetPermissionsForRole/role/{roleId}/permissions",
            ...options,
        });
    };

export const getApiV1AuthorizationGetAllRolesRoles = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1AuthorizationGetAllRolesRolesData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AuthorizationGetAllRolesRolesResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1AuthorizationGetAllRolesRolesResponseTransformer,
        url: "/api/v1/Authorization/GetAllRoles/roles",
        ...options,
    });
};

export const getApiV1AuthorizationGetAllPermissionsPermissions = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        GetApiV1AuthorizationGetAllPermissionsPermissionsData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1AuthorizationGetAllPermissionsPermissionsResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1AuthorizationGetAllPermissionsPermissionsResponseTransformer,
        url: "/api/v1/Authorization/GetAllPermissions/permissions",
        ...options,
    });
};

export const postByToken = <ThrowOnError extends boolean = false> (
    options: Options<PostByTokenData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
        {
            security: [
                {
                    name: "Authorization",
                    type: "apiKey",
                },
            ],
            url: "/{token}",
            ...options,
            headers: {
                "Content-Type": "application/json-patch+json",
                ...options?.headers,
            },
        },
    );
};

export const postApiV1CategoryAddCategory = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1CategoryAddCategoryData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1CategoryAddCategoryResponse,
        PostApiV1CategoryAddCategoryError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Category/AddCategory",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1CategoryGetCategories = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1CategoryGetCategoriesData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1CategoryGetCategoriesResponse,
        PostApiV1CategoryGetCategoriesError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: postApiV1CategoryGetCategoriesResponseTransformer,
        url: "/api/v1/Category/GetCategories",
        ...options,
    });
};

export const postApiV1CategoryGetCategory = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1CategoryGetCategoryData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1CategoryGetCategoryResponse,
        PostApiV1CategoryGetCategoryError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: postApiV1CategoryGetCategoryResponseTransformer,
        url: "/api/v1/Category/GetCategory",
        ...options,
    });
};

export const getApiV1CountryGetCountris = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1CountryGetCountrisData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1CountryGetCountrisResponse,
        GetApiV1CountryGetCountrisError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1CountryGetCountrisResponseTransformer,
        url: "/api/v1/Country/GetCountris",
        ...options,
    });
};

export const postApiV1CountryAddCountry = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1CountryAddCountryData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1CountryAddCountryResponse,
        PostApiV1CountryAddCountryError,
        ThrowOnError
    >({
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Country/AddCountry",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1DockerGetDocker = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1DockerGetDockerData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
        {
            security: [
                {
                    name: "Authorization",
                    type: "apiKey",
                },
            ],
            url: "/api/v1/Docker/GetDocker",
            ...options,
        },
    );
};

export const postApiV1MarzbanAddMarzbanServer = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1MarzbanAddMarzbanServerData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1MarzbanAddMarzbanServerResponse,
        PostApiV1MarzbanAddMarzbanServerError,
        ThrowOnError
    >({
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/AddMarzbanServer",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1MarzbanGetMarzbanServer = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1MarzbanGetMarzbanServerData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanGetMarzbanServerResponse,
        GetApiV1MarzbanGetMarzbanServerError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1MarzbanGetMarzbanServerResponseTransformer,
        url: "/api/v1/Marzban/GetMarzbanServer",
        ...options,
    });
};

export const getApiV1MarzbanGetMarzbanServers = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1MarzbanGetMarzbanServersData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanGetMarzbanServersResponse,
        GetApiV1MarzbanGetMarzbanServersError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1MarzbanGetMarzbanServersResponseTransformer,
        url: "/api/v1/Marzban/GetMarzbanServers",
        ...options,
    });
};

export const postApiV1MarzbanReasetMarzbanServerCore = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1MarzbanReasetMarzbanServerCoreData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1MarzbanReasetMarzbanServerCoreResponse,
        PostApiV1MarzbanReasetMarzbanServerCoreError,
        ThrowOnError
    >({
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/ReasetMarzbanServerCore",
        ...options,
    });
};

export const getApiV1MarzbanGetMarzbanServerCoreConfig = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        GetApiV1MarzbanGetMarzbanServerCoreConfigData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanGetMarzbanServerCoreConfigResponse,
        GetApiV1MarzbanGetMarzbanServerCoreConfigError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/GetMarzbanServerCoreConfig",
        ...options,
    });
};

export const putApiV1MarzbanUpdateMarzbanServerCoreConfig = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        PutApiV1MarzbanUpdateMarzbanServerCoreConfigData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1MarzbanUpdateMarzbanServerCoreConfigResponse,
        PutApiV1MarzbanUpdateMarzbanServerCoreConfigError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/UpdateMarzbanServerCoreConfig",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1MarzbanGetMarzbanServerNodeSettings = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        GetApiV1MarzbanGetMarzbanServerNodeSettingsData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanGetMarzbanServerNodeSettingsResponse,
        GetApiV1MarzbanGetMarzbanServerNodeSettingsError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/GetMarzbanServerNodeSettings",
        ...options,
    });
};

export const postApiV1MarzbanGetMarzbanServerNodeSettings = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        PostApiV1MarzbanGetMarzbanServerNodeSettingsData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1MarzbanGetMarzbanServerNodeSettingsResponse,
        PostApiV1MarzbanGetMarzbanServerNodeSettingsError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        postApiV1MarzbanGetMarzbanServerNodeSettingsResponseTransformer,
        url: "/api/v1/Marzban/GetMarzbanServerNodeSettings",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1MarzbanGetMarzbanServerNodeById = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1MarzbanGetMarzbanServerNodeByIdData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanGetMarzbanServerNodeByIdResponse,
        GetApiV1MarzbanGetMarzbanServerNodeByIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1MarzbanGetMarzbanServerNodeByIdResponseTransformer,
        url: "/api/v1/Marzban/GetMarzbanServerNodeById",
        ...options,
    });
};

export const putApiV1MarzbanUpdateMarzbanServerNode = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PutApiV1MarzbanUpdateMarzbanServerNodeData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1MarzbanUpdateMarzbanServerNodeResponse,
        PutApiV1MarzbanUpdateMarzbanServerNodeError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        putApiV1MarzbanUpdateMarzbanServerNodeResponseTransformer,
        url: "/api/v1/Marzban/UpdateMarzbanServerNode",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const deleteApiV1MarzbanDeleteMarzbanServerNode = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        DeleteApiV1MarzbanDeleteMarzbanServerNodeData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).delete<
        DeleteApiV1MarzbanDeleteMarzbanServerNodeResponse,
        DeleteApiV1MarzbanDeleteMarzbanServerNodeError,
        ThrowOnError
    >({
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/DeleteMarzbanServerNode",
        ...options,
    });
};

export const getApiV1MarzbanGetMarzbanServerNodes = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1MarzbanGetMarzbanServerNodesData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanGetMarzbanServerNodesResponse,
        GetApiV1MarzbanGetMarzbanServerNodesError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1MarzbanGetMarzbanServerNodesResponseTransformer,
        url: "/api/v1/Marzban/GetMarzbanServerNodes",
        ...options,
    });
};

export const getApiV1MarzbanGetMarzbanInbouds = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1MarzbanGetMarzbanInboudsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanGetMarzbanInboudsResponse,
        GetApiV1MarzbanGetMarzbanInboudsError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/GetMarzbanInbouds",
        ...options,
    });
};

export const getApiV1MarzbanPortocols = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1MarzbanPortocolsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanPortocolsResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/Portocols",
        ...options,
    });
};

export const postApiV1MarzbanAddMarzbanVpn = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1MarzbanAddMarzbanVpnData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1MarzbanAddMarzbanVpnResponse,
        PostApiV1MarzbanAddMarzbanVpnError,
        ThrowOnError
    >({
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/AddMarzbanVpn",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1MarzbanGetMarzbanVpn = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1MarzbanGetMarzbanVpnData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanGetMarzbanVpnResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1MarzbanGetMarzbanVpnResponseTransformer,
        url: "/api/v1/Marzban/GetMarzbanVpn",
        ...options,
    });
};

export const postApiV1MarzbanBuyMarzbanVpn = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1MarzbanBuyMarzbanVpnData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1MarzbanBuyMarzbanVpnResponse,
        PostApiV1MarzbanBuyMarzbanVpnError,
        ThrowOnError
    >({
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/BuyMarzbanVpn",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1MarzbanGetMarzbanUser = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1MarzbanGetMarzbanUserData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1MarzbanGetMarzbanUserResponse,
        PostApiV1MarzbanGetMarzbanUserError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/GetMarzbanUser",
        ...options,
    });
};

export const postApiV1MarzbanAddMarzbanVpnTemplate = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1MarzbanAddMarzbanVpnTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1MarzbanAddMarzbanVpnTemplateResponse,
        PostApiV1MarzbanAddMarzbanVpnTemplateError,
        ThrowOnError
    >({
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Marzban/AddMarzbanVpnTemplate",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1MarzbanGetMarzbanVpnTemplateByVpnId = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdResponse,
        GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1MarzbanGetMarzbanVpnTemplateByVpnIdResponseTransformer,
        url: "/api/v1/Marzban/GetMarzbanVpnTemplateByVpnId",
        ...options,
    });
};

export const postApiV1MenuAddMenus = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1MenuAddMenusData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1MenuAddMenusResponse,
        PostApiV1MenuAddMenusError,
        ThrowOnError
    >({
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Menu/AddMenus",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1MenuGetMenus = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1MenuGetMenusData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MenuGetMenusResponse,
        GetApiV1MenuGetMenusError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Menu/GetMenus",
        ...options,
    });
};

export const getApiV1MenuGetAllMenus = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1MenuGetAllMenusData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1MenuGetAllMenusResponse,
        GetApiV1MenuGetAllMenusError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Menu/GetAllMenus",
        ...options,
    });
};

export const getApiV1NotificationGetNotificationType = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1NotificationGetNotificationTypeData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1NotificationGetNotificationTypeResponse,
        GetApiV1NotificationGetNotificationTypeError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Notification/GetNotificationType",
        ...options,
    });
};

export const postApiV1NotificationAddNotification = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1NotificationAddNotificationData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1NotificationAddNotificationResponse,
        PostApiV1NotificationAddNotificationError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Notification/AddNotification",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1NotificationGetNotifications = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1NotificationGetNotificationsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1NotificationGetNotificationsResponse,
        GetApiV1NotificationGetNotificationsError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1NotificationGetNotificationsResponseTransformer,
        url: "/api/v1/Notification/GetNotifications",
        ...options,
    });
};

export const postApiV1OrderAddOrder = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1OrderAddOrderData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1OrderAddOrderResponse,
        PostApiV1OrderAddOrderError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Order/AddOrder",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1OrderFilterOrder = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1OrderFilterOrderData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1OrderFilterOrderResponse,
        GetApiV1OrderFilterOrderError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1OrderFilterOrderResponseTransformer,
        url: "/api/v1/Order/FilterOrder",
        ...options,
    });
};

export const getApiV1OrderFilterUserOrder = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1OrderFilterUserOrderData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1OrderFilterUserOrderResponse,
        GetApiV1OrderFilterUserOrderError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1OrderFilterUserOrderResponseTransformer,
        url: "/api/v1/Order/FilterUserOrder",
        ...options,
    });
};

export const getApiV1ProductGetProductByFilter = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1ProductGetProductByFilterData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1ProductGetProductByFilterResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1ProductGetProductByFilterResponseTransformer,
        url: "/api/v1/Product/GetProductByFilter",
        ...options,
    });
};

export const postApiV1ProductAddProduct = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1ProductAddProductData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1ProductAddProductResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Product/AddProduct",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1ProductAddVpnProduct = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1ProductAddVpnProductData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1ProductAddVpnProductResponse,
        unknown,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Product/AddVpnProduct",
        ...options,
        headers: {
            "Content-Type": null,
            ...options?.headers,
        },
    });
};

export const postApiV1RegistryAdd = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1RegistryAddData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1RegistryAddResponse,
        PostApiV1RegistryAddError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Registry/Add",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1RegistryFilter = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1RegistryFilterData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1RegistryFilterResponse,
        GetApiV1RegistryFilterError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1RegistryFilterResponseTransformer,
        url: "/api/v1/Registry/Filter",
        ...options,
    });
};

export const getApiV1RegistryFilterAll = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1RegistryFilterAllData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1RegistryFilterAllResponse,
        GetApiV1RegistryFilterAllError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1RegistryFilterAllResponseTransformer,
        url: "/api/v1/Registry/FilterAll",
        ...options,
    });
};

export const putApiV1RegistryUpdate = <ThrowOnError extends boolean = false> (
    options?: Options<PutApiV1RegistryUpdateData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1RegistryUpdateResponse,
        PutApiV1RegistryUpdateError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Registry/Update",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1RegistryUploadRegistryTransactionImages = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        PostApiV1RegistryUploadRegistryTransactionImagesData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1RegistryUploadRegistryTransactionImagesResponse,
        PostApiV1RegistryUploadRegistryTransactionImagesError,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Registry/UploadRegistryTransactionImages",
        ...options,
        headers: {
            "Content-Type": null,
            ...options?.headers,
        },
    });
};

export const getApiV1SanaeiGetInboundsList = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1SanaeiGetInboundsListData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1SanaeiGetInboundsListResponse,
        GetApiV1SanaeiGetInboundsListError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1SanaeiGetInboundsListResponseTransformer,
        url: "/api/v1/Sanaei/GetInboundsList",
        ...options,
    });
};

export const getApiV1SanaeiGetInboundsById = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1SanaeiGetInboundsByIdData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1SanaeiGetInboundsByIdResponse,
        GetApiV1SanaeiGetInboundsByIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1SanaeiGetInboundsByIdResponseTransformer,
        url: "/api/v1/Sanaei/GetInboundsById",
        ...options,
    });
};

export const postApiV1SanaeiAddInbound = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1SanaeiAddInboundData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1SanaeiAddInboundResponse,
        PostApiV1SanaeiAddInboundError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Sanaei/AddInbound",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const putApiV1SanaeiUpdateInbound = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PutApiV1SanaeiUpdateInboundData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1SanaeiUpdateInboundResponse,
        PutApiV1SanaeiUpdateInboundError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Sanaei/UpdateInbound",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const deleteApiV1SanaeiDeleteInbound = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<DeleteApiV1SanaeiDeleteInboundData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).delete<
        DeleteApiV1SanaeiDeleteInboundResponse,
        DeleteApiV1SanaeiDeleteInboundError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Sanaei/DeleteInbound",
        ...options,
    });
};

export const postApiV1SanaeiGetClientConfig = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1SanaeiGetClientConfigData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1SanaeiGetClientConfigResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Sanaei/GetClientConfig",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1ServerAddServer = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1ServerAddServerData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1ServerAddServerResponse,
        PostApiV1ServerAddServerError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Server/AddServer",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1ServerGetServers = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1ServerGetServersData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1ServerGetServersResponse,
        GetApiV1ServerGetServersError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1ServerGetServersResponseTransformer,
        url: "/api/v1/Server/GetServers",
        ...options,
    });
};

export const getApiV1ServerGetServerById = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1ServerGetServerByIdData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1ServerGetServerByIdResponse,
        GetApiV1ServerGetServerByIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Server/GetServerById",
        ...options,
    });
};

export const getApiV1ServerFilterServers = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1ServerFilterServersData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1ServerFilterServersResponse,
        GetApiV1ServerFilterServersError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1ServerFilterServersResponseTransformer,
        url: "/api/v1/Server/FilterServers",
        ...options,
    });
};

export const postApiV1TelegramAddTelegramBot = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1TelegramAddTelegramBotData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1TelegramAddTelegramBotResponse,
        PostApiV1TelegramAddTelegramBotError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: postApiV1TelegramAddTelegramBotResponseTransformer,
        url: "/api/v1/Telegram/AddTelegramBot",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const putApiV1TelegramStopTelegramBotById = <
    ThrowOnError extends boolean = false,
> (
    options: Options<PutApiV1TelegramStopTelegramBotByIdData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).put<
        PutApiV1TelegramStopTelegramBotByIdResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Telegram/StopTelegramBot/{id}",
        ...options,
    });
};

export const putApiV1TelegramStartTelegramBotById = <
    ThrowOnError extends boolean = false,
> (
    options: Options<PutApiV1TelegramStartTelegramBotByIdData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).put<
        PutApiV1TelegramStartTelegramBotByIdResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Telegram/StartTelegramBot/{id}",
        ...options,
    });
};

export const postApiV1TransactionAddTransaction = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1TransactionAddTransactionData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1TransactionAddTransactionResponse,
        PostApiV1TransactionAddTransactionError,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Transaction/AddTransaction",
        ...options,
        headers: {
            "Content-Type": null,
            ...options?.headers,
        },
    });
};

export const putApiV1TransactionUpdateTransactionStatus = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<
        PutApiV1TransactionUpdateTransactionStatusData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1TransactionUpdateTransactionStatusResponse,
        PutApiV1TransactionUpdateTransactionStatusError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Transaction/UpdateTransactionStatus",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1TransactionFilterTransaction = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1TransactionFilterTransactionData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1TransactionFilterTransactionResponse,
        GetApiV1TransactionFilterTransactionError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1TransactionFilterTransactionResponseTransformer,
        url: "/api/v1/Transaction/FilterTransaction",
        ...options,
    });
};

export const getApiV1TransactionGetTransactionById = <
    ThrowOnError extends boolean = false,
> (
    options: Options<GetApiV1TransactionGetTransactionByIdData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetApiV1TransactionGetTransactionByIdResponse,
        GetApiV1TransactionGetTransactionByIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1TransactionGetTransactionByIdResponseTransformer,
        url: "/api/v1/Transaction/GetTransaction/{id}",
        ...options,
    });
};

export const postApiV1TransactionAddTransactionDetail = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1TransactionAddTransactionDetailData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1TransactionAddTransactionDetailResponse,
        PostApiV1TransactionAddTransactionDetailError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Transaction/AddTransactionDetail",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1TransactionGetTransactionDetail = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1TransactionGetTransactionDetailData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1TransactionGetTransactionDetailResponse,
        GetApiV1TransactionGetTransactionDetailError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer:
        getApiV1TransactionGetTransactionDetailResponseTransformer,
        url: "/api/v1/Transaction/GetTransactionDetail",
        ...options,
    });
};

export const postApiV1TransactionIncreaseBalanceByUserId = <
    ThrowOnError extends boolean = false,
> (
    options: Options<
        PostApiV1TransactionIncreaseBalanceByUserIdData,
        ThrowOnError
    >,
) => {
    return (options.client ?? _heyApiClient).post<
        PostApiV1TransactionIncreaseBalanceByUserIdResponse,
        PostApiV1TransactionIncreaseBalanceByUserIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Transaction/IncreaseBalance/{userId}",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1TransactionDecreaseBalanceByUserId = <
    ThrowOnError extends boolean = false,
> (
    options: Options<
        PostApiV1TransactionDecreaseBalanceByUserIdData,
        ThrowOnError
    >,
) => {
    return (options.client ?? _heyApiClient).post<
        PostApiV1TransactionDecreaseBalanceByUserIdResponse,
        PostApiV1TransactionDecreaseBalanceByUserIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Transaction/DecreaseBalance/{userId}",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1UserLogin = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1UserLoginData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1UserLoginResponse,
        PostApiV1UserLoginError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/Login",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1UserRegister = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1UserRegisterData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1UserRegisterResponse,
        PostApiV1UserRegisterError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/Register",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1UserForgetPassword = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1UserForgetPasswordData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1UserForgetPasswordResponse,
        PostApiV1UserForgetPasswordError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/ForgetPassword",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getApiV1UserGetUsersByFilter = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1UserGetUsersByFilterData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1UserGetUsersByFilterResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1UserGetUsersByFilterResponseTransformer,
        url: "/api/v1/User/GetUsersByFilter",
        ...options,
    });
};

export const getApiV1UserGetAgentUsersFilter = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1UserGetAgentUsersFilterData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1UserGetAgentUsersFilterResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1UserGetAgentUsersFilterResponseTransformer,
        url: "/api/v1/User/GetAgentUsersFilter",
        ...options,
    });
};

export const getApiV1UserGetInformation = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<GetApiV1UserGetInformationData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1UserGetInformationResponse,
        GetApiV1UserGetInformationError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/GetInformation",
        ...options,
    });
};

export const getApiV1UserGetUserById = <ThrowOnError extends boolean = false> (
    options: Options<GetApiV1UserGetUserByIdData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetApiV1UserGetUserByIdResponse,
        GetApiV1UserGetUserByIdError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/GetUser/{id}",
        ...options,
    });
};

export const getApiV1UserGetMe = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1UserGetMeData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1UserGetMeResponse,
        GetApiV1UserGetMeError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/GetMe",
        ...options,
    });
};

export const getApiV1UserGetAgentUsers = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1UserGetAgentUsersData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1UserGetAgentUsersResponse,
        GetApiV1UserGetAgentUsersError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/GetAgentUsers",
        ...options,
    });
};

export const putApiV1UserUpdateProfile = <ThrowOnError extends boolean = false> (
    options?: Options<PutApiV1UserUpdateProfileData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1UserUpdateProfileResponse,
        PutApiV1UserUpdateProfileError,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/UpdateProfile",
        ...options,
        headers: {
            "Content-Type": null,
            ...options?.headers,
        },
    });
};

export const putApiV1UserUpdateUser = <ThrowOnError extends boolean = false> (
    options?: Options<PutApiV1UserUpdateUserData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).put<
        PutApiV1UserUpdateUserResponse,
        PutApiV1UserUpdateUserError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/UpdateUser",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const postApiV1UserSendMobileActiveCode = <
    ThrowOnError extends boolean = false,
> (
    options?: Options<PostApiV1UserSendMobileActiveCodeData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1UserSendMobileActiveCodeResponse,
        PostApiV1UserSendMobileActiveCodeError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/SendMobileActiveCode",
        ...options,
    });
};

export const postApiV1UserAddUser = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1UserAddUserData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1UserAddUserResponse,
        PostApiV1UserAddUserError,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/User/AddUser",
        ...options,
        headers: {
            "Content-Type": null,
            ...options?.headers,
        },
    });
};

export const getApiV1VpnGetVpns = <ThrowOnError extends boolean = false> (
    options?: Options<GetApiV1VpnGetVpnsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetApiV1VpnGetVpnsResponse,
        GetApiV1VpnGetVpnsError,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        responseTransformer: getApiV1VpnGetVpnsResponseTransformer,
        url: "/api/v1/Vpn/GetVpns",
        ...options,
    });
};

export const postApiV1VpnBuyVpn = <ThrowOnError extends boolean = false> (
    options?: Options<PostApiV1VpnBuyVpnData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        PostApiV1VpnBuyVpnResponse,
        unknown,
        ThrowOnError
    >({
        responseType: "text",
        security: [
            {
                name: "Authorization",
                type: "apiKey",
            },
        ],
        url: "/api/v1/Vpn/BuyVpn",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};
