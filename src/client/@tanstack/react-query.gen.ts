// This file is auto-generated by @hey-api/openapi-ts

import {
  deleteApiV1MarzbanDeleteMarzbanServerNode,
  deleteApiV1SanaeiDeleteInbound,
  getApiV1AgentAgencyInformation,
  getApiV1AgentAgentsReachedNegativeLimit,
  getApiV1AgentAgentsReachedNegativeNotLimit,
  getApiV1AgentFilterAgents,
  getApiV1AgentGetAdminAgentInformation,
  getApiV1AgentGetAgentByCodeByCode,
  getApiV1AgentGetAgentById,
  getApiV1AgentGetAgentInformation,
  getApiV1AgentGetAgentInformationPayment,
  getApiV1AgentGetAgentRequests,
  getApiV1AgentGetAgents,
  getApiV1AgentGetAgentStatus,
  getApiV1AgentGetAgentTree,
  getApiV1AgentGetUserAgent,
  getApiV1AgentInputUserReport,
  getApiV1AgentProfitReport,
  getApiV1AppleFilterAppleId,
  getApiV1AppleGetAppleIdByIdById,
  getApiV1AppleGetAppleIdType,
  getApiV1AuthorizationGetAllPermissionsPermissions,
  getApiV1AuthorizationGetAllRolesRoles,
  getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissions,
  getApiV1AuthorizationGetRolesForUserUserByUserIdRoles,
  getApiV1AuthorizationGetUserRolePermissions,
  getApiV1CountryGetCountris,
  getApiV1DockerGetDocker,
  getApiV1MarzbanGetMarzbanInbouds,
  getApiV1MarzbanGetMarzbanServer,
  getApiV1MarzbanGetMarzbanServerCoreConfig,
  getApiV1MarzbanGetMarzbanServerNodeById,
  getApiV1MarzbanGetMarzbanServerNodes,
  getApiV1MarzbanGetMarzbanServerNodeSettings,
  getApiV1MarzbanGetMarzbanServers,
  getApiV1MarzbanGetMarzbanVpn,
  getApiV1MarzbanGetMarzbanVpnTemplateByVpnId,
  getApiV1MarzbanPortocols,
  getApiV1MenuGetAllMenus,
  getApiV1MenuGetMenus,
  getApiV1NotificationGetNotifications,
  getApiV1NotificationGetNotificationType,
  getApiV1OrderFilterOrder,
  getApiV1OrderFilterUserOrder,
  getApiV1ProductGetProductByFilter,
  getApiV1RegistryFilter,
  getApiV1RegistryFilterAll,
  getApiV1SanaeiGetInboundsById,
  getApiV1SanaeiGetInboundsList,
  getApiV1ServerFilterServers,
  getApiV1ServerGetServerById,
  getApiV1ServerGetServers,
  getApiV1TransactionFilterTransaction,
  getApiV1TransactionGetTransactionById,
  getApiV1TransactionGetTransactionDetail,
  getApiV1UserGetAgentUsers,
  getApiV1UserGetAgentUsersFilter,
  getApiV1UserGetInformation,
  getApiV1UserGetMe,
  getApiV1UserGetUserById,
  getApiV1UserGetUsersByFilter,
  getApiV1VpnGetVpns,
  type Options,
  postApiV1AgentAddAgent,
  postApiV1AgentAddRequestForAgent,
  postApiV1AppleAddAppleId,
  postApiV1CategoryAddCategory,
  postApiV1CategoryGetCategories,
  postApiV1CategoryGetCategory,
  postApiV1CountryAddCountry,
  postApiV1MarzbanAddMarzbanServer,
  postApiV1MarzbanAddMarzbanVpn,
  postApiV1MarzbanAddMarzbanVpnTemplate,
  postApiV1MarzbanBuyMarzbanVpn,
  postApiV1MarzbanGetMarzbanServerNodeSettings,
  postApiV1MarzbanGetMarzbanUser,
  postApiV1MarzbanReasetMarzbanServerCore,
  postApiV1MenuAddMenus,
  postApiV1NotificationAddNotification,
  postApiV1OrderAddOrder,
  postApiV1ProductAddProduct,
  postApiV1ProductAddVpnProduct,
  postApiV1RegistryAdd,
  postApiV1RegistryUploadRegistryTransactionImages,
  postApiV1SanaeiAddInbound,
  postApiV1SanaeiGetClientConfig,
  postApiV1ServerAddServer,
  postApiV1TelegramAddTelegramBot,
  postApiV1TransactionAddTransaction,
  postApiV1TransactionAddTransactionDetail,
  postApiV1TransactionDecreaseBalanceByUserId,
  postApiV1TransactionIncreaseBalanceByUserId,
  postApiV1UserAddUser,
  postApiV1UserForgetPassword,
  postApiV1UserLogin,
  postApiV1UserRegister,
  postApiV1UserSendMobileActiveCode,
  postApiV1VpnBuyVpn,
  postByToken,
  putApiV1AgentChangeRequestStatus,
  putApiV1AgentUpdate,
  putApiV1AppleUpdateAppleId,
  putApiV1AuthorizationUpdateRolePermissionsRolePermissions,
  putApiV1AuthorizationUpdateUserRolesUserRoles,
  putApiV1MarzbanUpdateMarzbanServerCoreConfig,
  putApiV1MarzbanUpdateMarzbanServerNode,
  putApiV1RegistryUpdate,
  putApiV1SanaeiUpdateInbound,
  putApiV1TelegramStartTelegramBotById,
  putApiV1TelegramStopTelegramBotById,
  putApiV1TransactionUpdateTransactionStatus,
  putApiV1UserUpdateProfile,
  putApiV1UserUpdateUser,
} from "../sdk.gen";
import {type DefaultError, queryOptions, type UseMutationOptions,} from "@tanstack/react-query";
import type {
  DeleteApiV1MarzbanDeleteMarzbanServerNodeData,
  DeleteApiV1MarzbanDeleteMarzbanServerNodeError,
  DeleteApiV1MarzbanDeleteMarzbanServerNodeResponse,
  DeleteApiV1SanaeiDeleteInboundData,
  DeleteApiV1SanaeiDeleteInboundError,
  DeleteApiV1SanaeiDeleteInboundResponse,
  GetApiV1AgentAgencyInformationData,
  GetApiV1AgentAgentsReachedNegativeLimitData,
  GetApiV1AgentAgentsReachedNegativeNotLimitData,
  GetApiV1AgentFilterAgentsData,
  GetApiV1AgentGetAdminAgentInformationData,
  GetApiV1AgentGetAgentByCodeByCodeData,
  GetApiV1AgentGetAgentByIdData,
  GetApiV1AgentGetAgentInformationData,
  GetApiV1AgentGetAgentInformationPaymentData,
  GetApiV1AgentGetAgentRequestsData,
  GetApiV1AgentGetAgentsData,
  GetApiV1AgentGetAgentStatusData,
  GetApiV1AgentGetAgentTreeData,
  GetApiV1AgentGetUserAgentData,
  GetApiV1AgentInputUserReportData,
  GetApiV1AgentProfitReportData,
  GetApiV1AppleFilterAppleIdData,
  GetApiV1AppleGetAppleIdByIdByIdData,
  GetApiV1AppleGetAppleIdTypeData,
  GetApiV1AuthorizationGetAllPermissionsPermissionsData,
  GetApiV1AuthorizationGetAllRolesRolesData,
  GetApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsData,
  GetApiV1AuthorizationGetRolesForUserUserByUserIdRolesData,
  GetApiV1AuthorizationGetUserRolePermissionsData,
  GetApiV1CountryGetCountrisData,
  GetApiV1DockerGetDockerData,
  GetApiV1MarzbanGetMarzbanInboudsData,
  GetApiV1MarzbanGetMarzbanServerCoreConfigData,
  GetApiV1MarzbanGetMarzbanServerData,
  GetApiV1MarzbanGetMarzbanServerNodeByIdData,
  GetApiV1MarzbanGetMarzbanServerNodesData,
  GetApiV1MarzbanGetMarzbanServerNodeSettingsData,
  GetApiV1MarzbanGetMarzbanServersData,
  GetApiV1MarzbanGetMarzbanVpnData,
  GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdData,
  GetApiV1MarzbanPortocolsData,
  GetApiV1MenuGetAllMenusData,
  GetApiV1MenuGetMenusData,
  GetApiV1NotificationGetNotificationsData,
  GetApiV1NotificationGetNotificationTypeData,
  GetApiV1OrderFilterOrderData,
  GetApiV1OrderFilterUserOrderData,
  GetApiV1ProductGetProductByFilterData,
  GetApiV1RegistryFilterAllData,
  GetApiV1RegistryFilterData,
  GetApiV1SanaeiGetInboundsByIdData,
  GetApiV1SanaeiGetInboundsListData,
  GetApiV1ServerFilterServersData,
  GetApiV1ServerGetServerByIdData,
  GetApiV1ServerGetServersData,
  GetApiV1TransactionFilterTransactionData,
  GetApiV1TransactionGetTransactionByIdData,
  GetApiV1TransactionGetTransactionDetailData,
  GetApiV1UserGetAgentUsersData,
  GetApiV1UserGetAgentUsersFilterData,
  GetApiV1UserGetInformationData,
  GetApiV1UserGetMeData,
  GetApiV1UserGetUserByIdData,
  GetApiV1UserGetUsersByFilterData,
  GetApiV1VpnGetVpnsData,
  PostApiV1AgentAddAgentData,
  PostApiV1AgentAddAgentError,
  PostApiV1AgentAddAgentResponse,
  PostApiV1AgentAddRequestForAgentData,
  PostApiV1AgentAddRequestForAgentError,
  PostApiV1AgentAddRequestForAgentResponse,
  PostApiV1AppleAddAppleIdData,
  PostApiV1AppleAddAppleIdError,
  PostApiV1AppleAddAppleIdResponse,
  PostApiV1CategoryAddCategoryData,
  PostApiV1CategoryAddCategoryError,
  PostApiV1CategoryAddCategoryResponse,
  PostApiV1CategoryGetCategoriesData,
  PostApiV1CategoryGetCategoriesError,
  PostApiV1CategoryGetCategoriesResponse,
  PostApiV1CategoryGetCategoryData,
  PostApiV1CategoryGetCategoryError,
  PostApiV1CategoryGetCategoryResponse,
  PostApiV1CountryAddCountryData,
  PostApiV1CountryAddCountryError,
  PostApiV1CountryAddCountryResponse,
  PostApiV1MarzbanAddMarzbanServerData,
  PostApiV1MarzbanAddMarzbanServerError,
  PostApiV1MarzbanAddMarzbanServerResponse,
  PostApiV1MarzbanAddMarzbanVpnData,
  PostApiV1MarzbanAddMarzbanVpnError,
  PostApiV1MarzbanAddMarzbanVpnResponse,
  PostApiV1MarzbanAddMarzbanVpnTemplateData,
  PostApiV1MarzbanAddMarzbanVpnTemplateError,
  PostApiV1MarzbanAddMarzbanVpnTemplateResponse,
  PostApiV1MarzbanBuyMarzbanVpnData,
  PostApiV1MarzbanBuyMarzbanVpnError,
  PostApiV1MarzbanBuyMarzbanVpnResponse,
  PostApiV1MarzbanGetMarzbanServerNodeSettingsData,
  PostApiV1MarzbanGetMarzbanServerNodeSettingsError,
  PostApiV1MarzbanGetMarzbanServerNodeSettingsResponse,
  PostApiV1MarzbanGetMarzbanUserData,
  PostApiV1MarzbanGetMarzbanUserError,
  PostApiV1MarzbanGetMarzbanUserResponse,
  PostApiV1MarzbanReasetMarzbanServerCoreData,
  PostApiV1MarzbanReasetMarzbanServerCoreError,
  PostApiV1MarzbanReasetMarzbanServerCoreResponse,
  PostApiV1MenuAddMenusData,
  PostApiV1MenuAddMenusError,
  PostApiV1MenuAddMenusResponse,
  PostApiV1NotificationAddNotificationData,
  PostApiV1NotificationAddNotificationError,
  PostApiV1NotificationAddNotificationResponse,
  PostApiV1OrderAddOrderData,
  PostApiV1OrderAddOrderError,
  PostApiV1OrderAddOrderResponse,
  PostApiV1ProductAddProductData,
  PostApiV1ProductAddProductResponse,
  PostApiV1ProductAddVpnProductData,
  PostApiV1ProductAddVpnProductResponse,
  PostApiV1RegistryAddData,
  PostApiV1RegistryAddError,
  PostApiV1RegistryAddResponse,
  PostApiV1RegistryUploadRegistryTransactionImagesData,
  PostApiV1RegistryUploadRegistryTransactionImagesError,
  PostApiV1RegistryUploadRegistryTransactionImagesResponse,
  PostApiV1SanaeiAddInboundData,
  PostApiV1SanaeiAddInboundError,
  PostApiV1SanaeiAddInboundResponse,
  PostApiV1SanaeiGetClientConfigData,
  PostApiV1SanaeiGetClientConfigResponse,
  PostApiV1ServerAddServerData,
  PostApiV1ServerAddServerError,
  PostApiV1ServerAddServerResponse,
  PostApiV1TelegramAddTelegramBotData,
  PostApiV1TelegramAddTelegramBotError,
  PostApiV1TelegramAddTelegramBotResponse,
  PostApiV1TransactionAddTransactionData,
  PostApiV1TransactionAddTransactionDetailData,
  PostApiV1TransactionAddTransactionDetailError,
  PostApiV1TransactionAddTransactionDetailResponse,
  PostApiV1TransactionAddTransactionError,
  PostApiV1TransactionAddTransactionResponse,
  PostApiV1TransactionDecreaseBalanceByUserIdData,
  PostApiV1TransactionDecreaseBalanceByUserIdError,
  PostApiV1TransactionDecreaseBalanceByUserIdResponse,
  PostApiV1TransactionIncreaseBalanceByUserIdData,
  PostApiV1TransactionIncreaseBalanceByUserIdError,
  PostApiV1TransactionIncreaseBalanceByUserIdResponse,
  PostApiV1UserAddUserData,
  PostApiV1UserAddUserError,
  PostApiV1UserAddUserResponse,
  PostApiV1UserForgetPasswordData,
  PostApiV1UserForgetPasswordError,
  PostApiV1UserForgetPasswordResponse,
  PostApiV1UserLoginData,
  PostApiV1UserLoginError,
  PostApiV1UserLoginResponse,
  PostApiV1UserRegisterData,
  PostApiV1UserRegisterError,
  PostApiV1UserRegisterResponse,
  PostApiV1UserSendMobileActiveCodeData,
  PostApiV1UserSendMobileActiveCodeError,
  PostApiV1UserSendMobileActiveCodeResponse,
  PostApiV1VpnBuyVpnData,
  PostApiV1VpnBuyVpnResponse,
  PostByTokenData,
  PutApiV1AgentChangeRequestStatusData,
  PutApiV1AgentChangeRequestStatusError,
  PutApiV1AgentChangeRequestStatusResponse,
  PutApiV1AgentUpdateData,
  PutApiV1AgentUpdateError,
  PutApiV1AgentUpdateResponse,
  PutApiV1AppleUpdateAppleIdData,
  PutApiV1AppleUpdateAppleIdResponse,
  PutApiV1AuthorizationUpdateRolePermissionsRolePermissionsData,
  PutApiV1AuthorizationUpdateRolePermissionsRolePermissionsResponse,
  PutApiV1AuthorizationUpdateUserRolesUserRolesData,
  PutApiV1AuthorizationUpdateUserRolesUserRolesResponse,
  PutApiV1MarzbanUpdateMarzbanServerCoreConfigData,
  PutApiV1MarzbanUpdateMarzbanServerCoreConfigError,
  PutApiV1MarzbanUpdateMarzbanServerCoreConfigResponse,
  PutApiV1MarzbanUpdateMarzbanServerNodeData,
  PutApiV1MarzbanUpdateMarzbanServerNodeError,
  PutApiV1MarzbanUpdateMarzbanServerNodeResponse,
  PutApiV1RegistryUpdateData,
  PutApiV1RegistryUpdateError,
  PutApiV1RegistryUpdateResponse,
  PutApiV1SanaeiUpdateInboundData,
  PutApiV1SanaeiUpdateInboundError,
  PutApiV1SanaeiUpdateInboundResponse,
  PutApiV1TelegramStartTelegramBotByIdData,
  PutApiV1TelegramStartTelegramBotByIdResponse,
  PutApiV1TelegramStopTelegramBotByIdData,
  PutApiV1TelegramStopTelegramBotByIdResponse,
  PutApiV1TransactionUpdateTransactionStatusData,
  PutApiV1TransactionUpdateTransactionStatusError,
  PutApiV1TransactionUpdateTransactionStatusResponse,
  PutApiV1UserUpdateProfileData,
  PutApiV1UserUpdateProfileError,
  PutApiV1UserUpdateProfileResponse,
  PutApiV1UserUpdateUserData,
  PutApiV1UserUpdateUserError,
  PutApiV1UserUpdateUserResponse,
} from "../types.gen";
import type {AxiosError} from "axios";
import {client as _heyApiClient} from "../client.gen";


export type QueryKey<TOptions extends Options> = [
        Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
        _id: string;
        _infinite?: boolean;
    },
];

const createQueryKey = <TOptions extends Options> (
    id: string,
    options?: TOptions,
    infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseURL: (options?.client ?? _heyApiClient)?.getConfig().baseURL,
    } as QueryKey<TOptions>[0];
    if(infinite) {
        params._infinite = infinite;
    }
    if(options?.body) {
        params.body = options.body;
    }
    if(options?.headers) {
        params.headers = options.headers;
    }
    if(options?.path) {
        params.path = options.path;
    }
    if(options?.query) {
        params.query = options.query;
    }
    return [params];
};

export const getApiV1AgentAgentsReachedNegativeLimitQueryKey = (
    options?: Options<GetApiV1AgentAgentsReachedNegativeLimitData>,
) => createQueryKey("getApiV1AgentAgentsReachedNegativeLimit", options);

export const getApiV1AgentAgentsReachedNegativeLimitOptions = (
    options?: Options<GetApiV1AgentAgentsReachedNegativeLimitData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentAgentsReachedNegativeLimit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentAgentsReachedNegativeLimitQueryKey(options),
    });
};

export const getApiV1AgentAgentsReachedNegativeNotLimitQueryKey = (
    options?: Options<GetApiV1AgentAgentsReachedNegativeNotLimitData>,
) => createQueryKey("getApiV1AgentAgentsReachedNegativeNotLimit", options);

export const getApiV1AgentAgentsReachedNegativeNotLimitOptions = (
    options?: Options<GetApiV1AgentAgentsReachedNegativeNotLimitData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentAgentsReachedNegativeNotLimit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentAgentsReachedNegativeNotLimitQueryKey(options),
    });
};

export const getApiV1AgentAgencyInformationQueryKey = (
    options?: Options<GetApiV1AgentAgencyInformationData>,
) => createQueryKey("getApiV1AgentAgencyInformation", options);

export const getApiV1AgentAgencyInformationOptions = (
    options?: Options<GetApiV1AgentAgencyInformationData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentAgencyInformation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentAgencyInformationQueryKey(options),
    });
};

export const getApiV1AgentGetAgentTreeQueryKey = (
    options?: Options<GetApiV1AgentGetAgentTreeData>,
) => createQueryKey("getApiV1AgentGetAgentTree", options);

export const getApiV1AgentGetAgentTreeOptions = (
    options?: Options<GetApiV1AgentGetAgentTreeData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetAgentTree({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetAgentTreeQueryKey(options),
    });
};

export const getApiV1AgentGetAdminAgentInformationQueryKey = (
    options?: Options<GetApiV1AgentGetAdminAgentInformationData>,
) => createQueryKey("getApiV1AgentGetAdminAgentInformation", options);

export const getApiV1AgentGetAdminAgentInformationOptions = (
    options?: Options<GetApiV1AgentGetAdminAgentInformationData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetAdminAgentInformation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetAdminAgentInformationQueryKey(options),
    });
};

export const getApiV1AgentGetAgentByCodeByCodeQueryKey = (
    options: Options<GetApiV1AgentGetAgentByCodeByCodeData>,
) => createQueryKey("getApiV1AgentGetAgentByCodeByCode", options);

export const getApiV1AgentGetAgentByCodeByCodeOptions = (
    options: Options<GetApiV1AgentGetAgentByCodeByCodeData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetAgentByCodeByCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetAgentByCodeByCodeQueryKey(options),
    });
};

export const getApiV1AgentGetUserAgentQueryKey = (
    options?: Options<GetApiV1AgentGetUserAgentData>,
) => createQueryKey("getApiV1AgentGetUserAgent", options);

export const getApiV1AgentGetUserAgentOptions = (
    options?: Options<GetApiV1AgentGetUserAgentData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetUserAgent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetUserAgentQueryKey(options),
    });
};

export const getApiV1AgentGetAgentByIdQueryKey = (
    options?: Options<GetApiV1AgentGetAgentByIdData>,
) => createQueryKey("getApiV1AgentGetAgentById", options);

export const getApiV1AgentGetAgentByIdOptions = (
    options?: Options<GetApiV1AgentGetAgentByIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetAgentById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetAgentByIdQueryKey(options),
    });
};

export const getApiV1AgentGetAgentsQueryKey = (
    options?: Options<GetApiV1AgentGetAgentsData>,
) => createQueryKey("getApiV1AgentGetAgents", options);

export const getApiV1AgentGetAgentsOptions = (
    options?: Options<GetApiV1AgentGetAgentsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetAgents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetAgentsQueryKey(options),
    });
};

export const getApiV1AgentGetAgentInformationQueryKey = (
    options?: Options<GetApiV1AgentGetAgentInformationData>,
) => createQueryKey("getApiV1AgentGetAgentInformation", options);

export const getApiV1AgentGetAgentInformationOptions = (
    options?: Options<GetApiV1AgentGetAgentInformationData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetAgentInformation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetAgentInformationQueryKey(options),
    });
};

export const getApiV1AgentGetAgentInformationPaymentQueryKey = (
    options?: Options<GetApiV1AgentGetAgentInformationPaymentData>,
) => createQueryKey("getApiV1AgentGetAgentInformationPayment", options);

export const getApiV1AgentGetAgentInformationPaymentOptions = (
    options?: Options<GetApiV1AgentGetAgentInformationPaymentData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetAgentInformationPayment({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetAgentInformationPaymentQueryKey(options),
    });
};

export const getApiV1AgentGetAgentRequestsQueryKey = (
    options?: Options<GetApiV1AgentGetAgentRequestsData>,
) => createQueryKey("getApiV1AgentGetAgentRequests", options);

export const getApiV1AgentGetAgentRequestsOptions = (
    options?: Options<GetApiV1AgentGetAgentRequestsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetAgentRequests({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetAgentRequestsQueryKey(options),
    });
};

export const getApiV1AgentFilterAgentsQueryKey = (
    options?: Options<GetApiV1AgentFilterAgentsData>,
) => createQueryKey("getApiV1AgentFilterAgents", options);

export const getApiV1AgentFilterAgentsOptions = (
    options?: Options<GetApiV1AgentFilterAgentsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentFilterAgents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentFilterAgentsQueryKey(options),
    });
};

export const getApiV1AgentGetAgentStatusQueryKey = (
    options?: Options<GetApiV1AgentGetAgentStatusData>,
) => createQueryKey("getApiV1AgentGetAgentStatus", options);

export const getApiV1AgentGetAgentStatusOptions = (
    options?: Options<GetApiV1AgentGetAgentStatusData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentGetAgentStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentGetAgentStatusQueryKey(options),
    });
};

export const postApiV1AgentAddAgentQueryKey = (
    options?: Options<PostApiV1AgentAddAgentData>,
) => createQueryKey("postApiV1AgentAddAgent", options);

export const postApiV1AgentAddAgentOptions = (
    options?: Options<PostApiV1AgentAddAgentData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1AgentAddAgent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1AgentAddAgentQueryKey(options),
    });
};

export const postApiV1AgentAddAgentMutation = (
    options?: Partial<Options<PostApiV1AgentAddAgentData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1AgentAddAgentResponse,
        AxiosError<PostApiV1AgentAddAgentError>,
        Options<PostApiV1AgentAddAgentData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1AgentAddAgent({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1AgentAddRequestForAgentQueryKey = (
    options?: Options<PostApiV1AgentAddRequestForAgentData>,
) => createQueryKey("postApiV1AgentAddRequestForAgent", options);

export const postApiV1AgentAddRequestForAgentOptions = (
    options?: Options<PostApiV1AgentAddRequestForAgentData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1AgentAddRequestForAgent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1AgentAddRequestForAgentQueryKey(options),
    });
};

export const postApiV1AgentAddRequestForAgentMutation = (
    options?: Partial<Options<PostApiV1AgentAddRequestForAgentData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1AgentAddRequestForAgentResponse,
        AxiosError<PostApiV1AgentAddRequestForAgentError>,
        Options<PostApiV1AgentAddRequestForAgentData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1AgentAddRequestForAgent({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const putApiV1AgentChangeRequestStatusMutation = (
    options?: Partial<Options<PutApiV1AgentChangeRequestStatusData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1AgentChangeRequestStatusResponse,
        AxiosError<PutApiV1AgentChangeRequestStatusError>,
        Options<PutApiV1AgentChangeRequestStatusData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1AgentChangeRequestStatus({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const putApiV1AgentUpdateMutation = (
    options?: Partial<Options<PutApiV1AgentUpdateData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1AgentUpdateResponse,
        AxiosError<PutApiV1AgentUpdateError>,
        Options<PutApiV1AgentUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1AgentUpdate({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1AgentProfitReportQueryKey = (
    options?: Options<GetApiV1AgentProfitReportData>,
) => createQueryKey("getApiV1AgentProfitReport", options);

export const getApiV1AgentProfitReportOptions = (
    options?: Options<GetApiV1AgentProfitReportData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentProfitReport({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentProfitReportQueryKey(options),
    });
};

export const getApiV1AgentInputUserReportQueryKey = (
    options?: Options<GetApiV1AgentInputUserReportData>,
) => createQueryKey("getApiV1AgentInputUserReport", options);

export const getApiV1AgentInputUserReportOptions = (
    options?: Options<GetApiV1AgentInputUserReportData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AgentInputUserReport({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AgentInputUserReportQueryKey(options),
    });
};

export const getApiV1AppleGetAppleIdTypeQueryKey = (
    options?: Options<GetApiV1AppleGetAppleIdTypeData>,
) => createQueryKey("getApiV1AppleGetAppleIdType", options);

export const getApiV1AppleGetAppleIdTypeOptions = (
    options?: Options<GetApiV1AppleGetAppleIdTypeData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AppleGetAppleIdType({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AppleGetAppleIdTypeQueryKey(options),
    });
};

export const getApiV1AppleFilterAppleIdQueryKey = (
    options?: Options<GetApiV1AppleFilterAppleIdData>,
) => createQueryKey("getApiV1AppleFilterAppleId", options);

export const getApiV1AppleFilterAppleIdOptions = (
    options?: Options<GetApiV1AppleFilterAppleIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AppleFilterAppleId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AppleFilterAppleIdQueryKey(options),
    });
};

export const postApiV1AppleAddAppleIdQueryKey = (
    options?: Options<PostApiV1AppleAddAppleIdData>,
) => createQueryKey("postApiV1AppleAddAppleId", options);

export const postApiV1AppleAddAppleIdOptions = (
    options?: Options<PostApiV1AppleAddAppleIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1AppleAddAppleId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1AppleAddAppleIdQueryKey(options),
    });
};

export const postApiV1AppleAddAppleIdMutation = (
    options?: Partial<Options<PostApiV1AppleAddAppleIdData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1AppleAddAppleIdResponse,
        AxiosError<PostApiV1AppleAddAppleIdError>,
        Options<PostApiV1AppleAddAppleIdData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1AppleAddAppleId({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1AppleGetAppleIdByIdByIdQueryKey = (
    options: Options<GetApiV1AppleGetAppleIdByIdByIdData>,
) => createQueryKey("getApiV1AppleGetAppleIdByIdById", options);

export const getApiV1AppleGetAppleIdByIdByIdOptions = (
    options: Options<GetApiV1AppleGetAppleIdByIdByIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AppleGetAppleIdByIdById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AppleGetAppleIdByIdByIdQueryKey(options),
    });
};

export const putApiV1AppleUpdateAppleIdMutation = (
    options?: Partial<Options<PutApiV1AppleUpdateAppleIdData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1AppleUpdateAppleIdResponse,
        AxiosError<DefaultError>,
        Options<PutApiV1AppleUpdateAppleIdData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1AppleUpdateAppleId({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1AuthorizationGetUserRolePermissionsQueryKey = (
    options?: Options<GetApiV1AuthorizationGetUserRolePermissionsData>,
) => createQueryKey("getApiV1AuthorizationGetUserRolePermissions", options);

export const getApiV1AuthorizationGetUserRolePermissionsOptions = (
    options?: Options<GetApiV1AuthorizationGetUserRolePermissionsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AuthorizationGetUserRolePermissions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AuthorizationGetUserRolePermissionsQueryKey(options),
    });
};

export const putApiV1AuthorizationUpdateUserRolesUserRolesMutation = (
    options?: Partial<Options<PutApiV1AuthorizationUpdateUserRolesUserRolesData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1AuthorizationUpdateUserRolesUserRolesResponse,
        AxiosError<DefaultError>,
        Options<PutApiV1AuthorizationUpdateUserRolesUserRolesData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1AuthorizationUpdateUserRolesUserRoles({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const putApiV1AuthorizationUpdateRolePermissionsRolePermissionsMutation =
    (
        options?: Partial<
            Options<PutApiV1AuthorizationUpdateRolePermissionsRolePermissionsData>
        >,
    ) => {
        const mutationOptions: UseMutationOptions<
            PutApiV1AuthorizationUpdateRolePermissionsRolePermissionsResponse,
            AxiosError<DefaultError>,
            Options<PutApiV1AuthorizationUpdateRolePermissionsRolePermissionsData>
        > = {
            mutationFn: async (localOptions) => {
                const {data} =
                    await putApiV1AuthorizationUpdateRolePermissionsRolePermissions({
                        ...options,
                        ...localOptions,
                        throwOnError: true,
                    });
                return data;
            },
        };
        return mutationOptions;
    };

export const getApiV1AuthorizationGetRolesForUserUserByUserIdRolesQueryKey = (
    options: Options<GetApiV1AuthorizationGetRolesForUserUserByUserIdRolesData>,
) =>
    createQueryKey(
        "getApiV1AuthorizationGetRolesForUserUserByUserIdRoles",
        options,
    );

export const getApiV1AuthorizationGetRolesForUserUserByUserIdRolesOptions = (
    options: Options<GetApiV1AuthorizationGetRolesForUserUserByUserIdRolesData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} =
                await getApiV1AuthorizationGetRolesForUserUserByUserIdRoles({
                    ...options,
                    ...queryKey[0],
                    signal,
                    throwOnError: true,
                });
            return data;
        },
        queryKey:
            getApiV1AuthorizationGetRolesForUserUserByUserIdRolesQueryKey(options),
    });
};

export const getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsQueryKey =
    (
        options: Options<GetApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsData>,
    ) =>
        createQueryKey(
            "getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissions",
            options,
        );

export const getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsOptions =
    (
        options: Options<GetApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsData>,
    ) => {
        return queryOptions({
            queryFn: async ({queryKey, signal}) => {
                const {data} =
                    await getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissions(
                        {
                            ...options,
                            ...queryKey[0],
                            signal,
                            throwOnError: true,
                        },
                    );
                return data;
            },
            queryKey:
                getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsQueryKey(
                    options,
                ),
        });
    };

export const getApiV1AuthorizationGetAllRolesRolesQueryKey = (
    options?: Options<GetApiV1AuthorizationGetAllRolesRolesData>,
) => createQueryKey("getApiV1AuthorizationGetAllRolesRoles", options);

export const getApiV1AuthorizationGetAllRolesRolesOptions = (
    options?: Options<GetApiV1AuthorizationGetAllRolesRolesData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AuthorizationGetAllRolesRoles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1AuthorizationGetAllRolesRolesQueryKey(options),
    });
};

export const getApiV1AuthorizationGetAllPermissionsPermissionsQueryKey = (
    options?: Options<GetApiV1AuthorizationGetAllPermissionsPermissionsData>,
) =>
    createQueryKey("getApiV1AuthorizationGetAllPermissionsPermissions", options);

export const getApiV1AuthorizationGetAllPermissionsPermissionsOptions = (
    options?: Options<GetApiV1AuthorizationGetAllPermissionsPermissionsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1AuthorizationGetAllPermissionsPermissions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey:
            getApiV1AuthorizationGetAllPermissionsPermissionsQueryKey(options),
    });
};

export const postByTokenQueryKey = (options: Options<PostByTokenData>) =>
    createQueryKey("postByToken", options);

export const postByTokenOptions = (options: Options<PostByTokenData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postByToken({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postByTokenQueryKey(options),
    });
};

export const postByTokenMutation = (
    options?: Partial<Options<PostByTokenData>>,
) => {
    const mutationOptions: UseMutationOptions<
        unknown,
        AxiosError<DefaultError>,
        Options<PostByTokenData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postByToken({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1CategoryAddCategoryQueryKey = (
    options?: Options<PostApiV1CategoryAddCategoryData>,
) => createQueryKey("postApiV1CategoryAddCategory", options);

export const postApiV1CategoryAddCategoryOptions = (
    options?: Options<PostApiV1CategoryAddCategoryData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1CategoryAddCategory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1CategoryAddCategoryQueryKey(options),
    });
};

export const postApiV1CategoryAddCategoryMutation = (
    options?: Partial<Options<PostApiV1CategoryAddCategoryData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1CategoryAddCategoryResponse,
        AxiosError<PostApiV1CategoryAddCategoryError>,
        Options<PostApiV1CategoryAddCategoryData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1CategoryAddCategory({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1CategoryGetCategoriesQueryKey = (
    options?: Options<PostApiV1CategoryGetCategoriesData>,
) => createQueryKey("postApiV1CategoryGetCategories", options);

export const postApiV1CategoryGetCategoriesOptions = (
    options?: Options<PostApiV1CategoryGetCategoriesData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1CategoryGetCategories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1CategoryGetCategoriesQueryKey(options),
    });
};

export const postApiV1CategoryGetCategoriesMutation = (
    options?: Partial<Options<PostApiV1CategoryGetCategoriesData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1CategoryGetCategoriesResponse,
        AxiosError<PostApiV1CategoryGetCategoriesError>,
        Options<PostApiV1CategoryGetCategoriesData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1CategoryGetCategories({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1CategoryGetCategoryQueryKey = (
    options?: Options<PostApiV1CategoryGetCategoryData>,
) => createQueryKey("postApiV1CategoryGetCategory", options);

export const postApiV1CategoryGetCategoryOptions = (
    options?: Options<PostApiV1CategoryGetCategoryData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1CategoryGetCategory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1CategoryGetCategoryQueryKey(options),
    });
};

export const postApiV1CategoryGetCategoryMutation = (
    options?: Partial<Options<PostApiV1CategoryGetCategoryData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1CategoryGetCategoryResponse,
        AxiosError<PostApiV1CategoryGetCategoryError>,
        Options<PostApiV1CategoryGetCategoryData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1CategoryGetCategory({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1CountryGetCountrisQueryKey = (
    options?: Options<GetApiV1CountryGetCountrisData>,
) => createQueryKey("getApiV1CountryGetCountris", options);

export const getApiV1CountryGetCountrisOptions = (
    options?: Options<GetApiV1CountryGetCountrisData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1CountryGetCountris({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1CountryGetCountrisQueryKey(options),
    });
};

export const postApiV1CountryAddCountryQueryKey = (
    options?: Options<PostApiV1CountryAddCountryData>,
) => createQueryKey("postApiV1CountryAddCountry", options);

export const postApiV1CountryAddCountryOptions = (
    options?: Options<PostApiV1CountryAddCountryData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1CountryAddCountry({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1CountryAddCountryQueryKey(options),
    });
};

export const postApiV1CountryAddCountryMutation = (
    options?: Partial<Options<PostApiV1CountryAddCountryData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1CountryAddCountryResponse,
        AxiosError<PostApiV1CountryAddCountryError>,
        Options<PostApiV1CountryAddCountryData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1CountryAddCountry({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1DockerGetDockerQueryKey = (
    options?: Options<GetApiV1DockerGetDockerData>,
) => createQueryKey("getApiV1DockerGetDocker", options);

export const getApiV1DockerGetDockerOptions = (
    options?: Options<GetApiV1DockerGetDockerData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1DockerGetDocker({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1DockerGetDockerQueryKey(options),
    });
};

export const postApiV1MarzbanAddMarzbanServerQueryKey = (
    options?: Options<PostApiV1MarzbanAddMarzbanServerData>,
) => createQueryKey("postApiV1MarzbanAddMarzbanServer", options);

export const postApiV1MarzbanAddMarzbanServerOptions = (
    options?: Options<PostApiV1MarzbanAddMarzbanServerData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1MarzbanAddMarzbanServer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1MarzbanAddMarzbanServerQueryKey(options),
    });
};

export const postApiV1MarzbanAddMarzbanServerMutation = (
    options?: Partial<Options<PostApiV1MarzbanAddMarzbanServerData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1MarzbanAddMarzbanServerResponse,
        AxiosError<PostApiV1MarzbanAddMarzbanServerError>,
        Options<PostApiV1MarzbanAddMarzbanServerData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1MarzbanAddMarzbanServer({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1MarzbanGetMarzbanServerQueryKey = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerData>,
) => createQueryKey("getApiV1MarzbanGetMarzbanServer", options);

export const getApiV1MarzbanGetMarzbanServerOptions = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanGetMarzbanServer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanGetMarzbanServerQueryKey(options),
    });
};

export const getApiV1MarzbanGetMarzbanServersQueryKey = (
    options?: Options<GetApiV1MarzbanGetMarzbanServersData>,
) => createQueryKey("getApiV1MarzbanGetMarzbanServers", options);

export const getApiV1MarzbanGetMarzbanServersOptions = (
    options?: Options<GetApiV1MarzbanGetMarzbanServersData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanGetMarzbanServers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanGetMarzbanServersQueryKey(options),
    });
};

export const postApiV1MarzbanReasetMarzbanServerCoreQueryKey = (
    options?: Options<PostApiV1MarzbanReasetMarzbanServerCoreData>,
) => createQueryKey("postApiV1MarzbanReasetMarzbanServerCore", options);

export const postApiV1MarzbanReasetMarzbanServerCoreOptions = (
    options?: Options<PostApiV1MarzbanReasetMarzbanServerCoreData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1MarzbanReasetMarzbanServerCore({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1MarzbanReasetMarzbanServerCoreQueryKey(options),
    });
};

export const postApiV1MarzbanReasetMarzbanServerCoreMutation = (
    options?: Partial<Options<PostApiV1MarzbanReasetMarzbanServerCoreData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1MarzbanReasetMarzbanServerCoreResponse,
        AxiosError<PostApiV1MarzbanReasetMarzbanServerCoreError>,
        Options<PostApiV1MarzbanReasetMarzbanServerCoreData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1MarzbanReasetMarzbanServerCore({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1MarzbanGetMarzbanServerCoreConfigQueryKey = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerCoreConfigData>,
) => createQueryKey("getApiV1MarzbanGetMarzbanServerCoreConfig", options);

export const getApiV1MarzbanGetMarzbanServerCoreConfigOptions = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerCoreConfigData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanGetMarzbanServerCoreConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanGetMarzbanServerCoreConfigQueryKey(options),
    });
};

export const putApiV1MarzbanUpdateMarzbanServerCoreConfigMutation = (
    options?: Partial<Options<PutApiV1MarzbanUpdateMarzbanServerCoreConfigData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1MarzbanUpdateMarzbanServerCoreConfigResponse,
        AxiosError<PutApiV1MarzbanUpdateMarzbanServerCoreConfigError>,
        Options<PutApiV1MarzbanUpdateMarzbanServerCoreConfigData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1MarzbanUpdateMarzbanServerCoreConfig({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1MarzbanGetMarzbanServerNodeSettingsQueryKey = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerNodeSettingsData>,
) => createQueryKey("getApiV1MarzbanGetMarzbanServerNodeSettings", options);

export const getApiV1MarzbanGetMarzbanServerNodeSettingsOptions = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerNodeSettingsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanGetMarzbanServerNodeSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanGetMarzbanServerNodeSettingsQueryKey(options),
    });
};

export const postApiV1MarzbanGetMarzbanServerNodeSettingsQueryKey = (
    options?: Options<PostApiV1MarzbanGetMarzbanServerNodeSettingsData>,
) => createQueryKey("postApiV1MarzbanGetMarzbanServerNodeSettings", options);

export const postApiV1MarzbanGetMarzbanServerNodeSettingsOptions = (
    options?: Options<PostApiV1MarzbanGetMarzbanServerNodeSettingsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1MarzbanGetMarzbanServerNodeSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1MarzbanGetMarzbanServerNodeSettingsQueryKey(options),
    });
};

export const postApiV1MarzbanGetMarzbanServerNodeSettingsMutation = (
    options?: Partial<Options<PostApiV1MarzbanGetMarzbanServerNodeSettingsData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1MarzbanGetMarzbanServerNodeSettingsResponse,
        AxiosError<PostApiV1MarzbanGetMarzbanServerNodeSettingsError>,
        Options<PostApiV1MarzbanGetMarzbanServerNodeSettingsData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1MarzbanGetMarzbanServerNodeSettings({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1MarzbanGetMarzbanServerNodeByIdQueryKey = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerNodeByIdData>,
) => createQueryKey("getApiV1MarzbanGetMarzbanServerNodeById", options);

export const getApiV1MarzbanGetMarzbanServerNodeByIdOptions = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerNodeByIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanGetMarzbanServerNodeById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanGetMarzbanServerNodeByIdQueryKey(options),
    });
};

export const putApiV1MarzbanUpdateMarzbanServerNodeMutation = (
    options?: Partial<Options<PutApiV1MarzbanUpdateMarzbanServerNodeData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1MarzbanUpdateMarzbanServerNodeResponse,
        AxiosError<PutApiV1MarzbanUpdateMarzbanServerNodeError>,
        Options<PutApiV1MarzbanUpdateMarzbanServerNodeData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1MarzbanUpdateMarzbanServerNode({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const deleteApiV1MarzbanDeleteMarzbanServerNodeMutation = (
    options?: Partial<Options<DeleteApiV1MarzbanDeleteMarzbanServerNodeData>>,
) => {
    const mutationOptions: UseMutationOptions<
        DeleteApiV1MarzbanDeleteMarzbanServerNodeResponse,
        AxiosError<DeleteApiV1MarzbanDeleteMarzbanServerNodeError>,
        Options<DeleteApiV1MarzbanDeleteMarzbanServerNodeData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await deleteApiV1MarzbanDeleteMarzbanServerNode({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1MarzbanGetMarzbanServerNodesQueryKey = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerNodesData>,
) => createQueryKey("getApiV1MarzbanGetMarzbanServerNodes", options);

export const getApiV1MarzbanGetMarzbanServerNodesOptions = (
    options?: Options<GetApiV1MarzbanGetMarzbanServerNodesData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanGetMarzbanServerNodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanGetMarzbanServerNodesQueryKey(options),
    });
};

export const getApiV1MarzbanGetMarzbanInboudsQueryKey = (
    options?: Options<GetApiV1MarzbanGetMarzbanInboudsData>,
) => createQueryKey("getApiV1MarzbanGetMarzbanInbouds", options);

export const getApiV1MarzbanGetMarzbanInboudsOptions = (
    options?: Options<GetApiV1MarzbanGetMarzbanInboudsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanGetMarzbanInbouds({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanGetMarzbanInboudsQueryKey(options),
    });
};

export const getApiV1MarzbanPortocolsQueryKey = (
    options?: Options<GetApiV1MarzbanPortocolsData>,
) => createQueryKey("getApiV1MarzbanPortocols", options);

export const getApiV1MarzbanPortocolsOptions = (
    options?: Options<GetApiV1MarzbanPortocolsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanPortocols({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanPortocolsQueryKey(options),
    });
};

export const postApiV1MarzbanAddMarzbanVpnQueryKey = (
    options?: Options<PostApiV1MarzbanAddMarzbanVpnData>,
) => createQueryKey("postApiV1MarzbanAddMarzbanVpn", options);

export const postApiV1MarzbanAddMarzbanVpnOptions = (
    options?: Options<PostApiV1MarzbanAddMarzbanVpnData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1MarzbanAddMarzbanVpn({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1MarzbanAddMarzbanVpnQueryKey(options),
    });
};

export const postApiV1MarzbanAddMarzbanVpnMutation = (
    options?: Partial<Options<PostApiV1MarzbanAddMarzbanVpnData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1MarzbanAddMarzbanVpnResponse,
        AxiosError<PostApiV1MarzbanAddMarzbanVpnError>,
        Options<PostApiV1MarzbanAddMarzbanVpnData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1MarzbanAddMarzbanVpn({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1MarzbanGetMarzbanVpnQueryKey = (
    options?: Options<GetApiV1MarzbanGetMarzbanVpnData>,
) => createQueryKey("getApiV1MarzbanGetMarzbanVpn", options);

export const getApiV1MarzbanGetMarzbanVpnOptions = (
    options?: Options<GetApiV1MarzbanGetMarzbanVpnData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanGetMarzbanVpn({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanGetMarzbanVpnQueryKey(options),
    });
};

export const postApiV1MarzbanBuyMarzbanVpnQueryKey = (
    options?: Options<PostApiV1MarzbanBuyMarzbanVpnData>,
) => createQueryKey("postApiV1MarzbanBuyMarzbanVpn", options);

export const postApiV1MarzbanBuyMarzbanVpnOptions = (
    options?: Options<PostApiV1MarzbanBuyMarzbanVpnData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1MarzbanBuyMarzbanVpn({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1MarzbanBuyMarzbanVpnQueryKey(options),
    });
};

export const postApiV1MarzbanBuyMarzbanVpnMutation = (
    options?: Partial<Options<PostApiV1MarzbanBuyMarzbanVpnData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1MarzbanBuyMarzbanVpnResponse,
        AxiosError<PostApiV1MarzbanBuyMarzbanVpnError>,
        Options<PostApiV1MarzbanBuyMarzbanVpnData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1MarzbanBuyMarzbanVpn({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1MarzbanGetMarzbanUserQueryKey = (
    options?: Options<PostApiV1MarzbanGetMarzbanUserData>,
) => createQueryKey("postApiV1MarzbanGetMarzbanUser", options);

export const postApiV1MarzbanGetMarzbanUserOptions = (
    options?: Options<PostApiV1MarzbanGetMarzbanUserData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1MarzbanGetMarzbanUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1MarzbanGetMarzbanUserQueryKey(options),
    });
};

export const postApiV1MarzbanGetMarzbanUserMutation = (
    options?: Partial<Options<PostApiV1MarzbanGetMarzbanUserData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1MarzbanGetMarzbanUserResponse,
        AxiosError<PostApiV1MarzbanGetMarzbanUserError>,
        Options<PostApiV1MarzbanGetMarzbanUserData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1MarzbanGetMarzbanUser({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1MarzbanAddMarzbanVpnTemplateQueryKey = (
    options?: Options<PostApiV1MarzbanAddMarzbanVpnTemplateData>,
) => createQueryKey("postApiV1MarzbanAddMarzbanVpnTemplate", options);

export const postApiV1MarzbanAddMarzbanVpnTemplateOptions = (
    options?: Options<PostApiV1MarzbanAddMarzbanVpnTemplateData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1MarzbanAddMarzbanVpnTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1MarzbanAddMarzbanVpnTemplateQueryKey(options),
    });
};

export const postApiV1MarzbanAddMarzbanVpnTemplateMutation = (
    options?: Partial<Options<PostApiV1MarzbanAddMarzbanVpnTemplateData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1MarzbanAddMarzbanVpnTemplateResponse,
        AxiosError<PostApiV1MarzbanAddMarzbanVpnTemplateError>,
        Options<PostApiV1MarzbanAddMarzbanVpnTemplateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1MarzbanAddMarzbanVpnTemplate({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1MarzbanGetMarzbanVpnTemplateByVpnIdQueryKey = (
    options?: Options<GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdData>,
) => createQueryKey("getApiV1MarzbanGetMarzbanVpnTemplateByVpnId", options);

export const getApiV1MarzbanGetMarzbanVpnTemplateByVpnIdOptions = (
    options?: Options<GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MarzbanGetMarzbanVpnTemplateByVpnId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MarzbanGetMarzbanVpnTemplateByVpnIdQueryKey(options),
    });
};

export const postApiV1MenuAddMenusQueryKey = (
    options?: Options<PostApiV1MenuAddMenusData>,
) => createQueryKey("postApiV1MenuAddMenus", options);

export const postApiV1MenuAddMenusOptions = (
    options?: Options<PostApiV1MenuAddMenusData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1MenuAddMenus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1MenuAddMenusQueryKey(options),
    });
};

export const postApiV1MenuAddMenusMutation = (
    options?: Partial<Options<PostApiV1MenuAddMenusData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1MenuAddMenusResponse,
        AxiosError<PostApiV1MenuAddMenusError>,
        Options<PostApiV1MenuAddMenusData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1MenuAddMenus({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1MenuGetMenusQueryKey = (
    options?: Options<GetApiV1MenuGetMenusData>,
) => createQueryKey("getApiV1MenuGetMenus", options);

export const getApiV1MenuGetMenusOptions = (
    options?: Options<GetApiV1MenuGetMenusData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MenuGetMenus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MenuGetMenusQueryKey(options),
    });
};

export const getApiV1MenuGetAllMenusQueryKey = (
    options?: Options<GetApiV1MenuGetAllMenusData>,
) => createQueryKey("getApiV1MenuGetAllMenus", options);

export const getApiV1MenuGetAllMenusOptions = (
    options?: Options<GetApiV1MenuGetAllMenusData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1MenuGetAllMenus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1MenuGetAllMenusQueryKey(options),
    });
};

export const getApiV1NotificationGetNotificationTypeQueryKey = (
    options?: Options<GetApiV1NotificationGetNotificationTypeData>,
) => createQueryKey("getApiV1NotificationGetNotificationType", options);

export const getApiV1NotificationGetNotificationTypeOptions = (
    options?: Options<GetApiV1NotificationGetNotificationTypeData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1NotificationGetNotificationType({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1NotificationGetNotificationTypeQueryKey(options),
    });
};

export const postApiV1NotificationAddNotificationQueryKey = (
    options?: Options<PostApiV1NotificationAddNotificationData>,
) => createQueryKey("postApiV1NotificationAddNotification", options);

export const postApiV1NotificationAddNotificationOptions = (
    options?: Options<PostApiV1NotificationAddNotificationData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1NotificationAddNotification({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1NotificationAddNotificationQueryKey(options),
    });
};

export const postApiV1NotificationAddNotificationMutation = (
    options?: Partial<Options<PostApiV1NotificationAddNotificationData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1NotificationAddNotificationResponse,
        AxiosError<PostApiV1NotificationAddNotificationError>,
        Options<PostApiV1NotificationAddNotificationData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1NotificationAddNotification({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1NotificationGetNotificationsQueryKey = (
    options?: Options<GetApiV1NotificationGetNotificationsData>,
) => createQueryKey("getApiV1NotificationGetNotifications", options);

export const getApiV1NotificationGetNotificationsOptions = (
    options?: Options<GetApiV1NotificationGetNotificationsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1NotificationGetNotifications({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1NotificationGetNotificationsQueryKey(options),
    });
};

export const postApiV1OrderAddOrderQueryKey = (
    options?: Options<PostApiV1OrderAddOrderData>,
) => createQueryKey("postApiV1OrderAddOrder", options);

export const postApiV1OrderAddOrderOptions = (
    options?: Options<PostApiV1OrderAddOrderData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1OrderAddOrder({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1OrderAddOrderQueryKey(options),
    });
};

export const postApiV1OrderAddOrderMutation = (
    options?: Partial<Options<PostApiV1OrderAddOrderData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1OrderAddOrderResponse,
        AxiosError<PostApiV1OrderAddOrderError>,
        Options<PostApiV1OrderAddOrderData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1OrderAddOrder({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1OrderFilterOrderQueryKey = (
    options?: Options<GetApiV1OrderFilterOrderData>,
) => createQueryKey("getApiV1OrderFilterOrder", options);

export const getApiV1OrderFilterOrderOptions = (
    options?: Options<GetApiV1OrderFilterOrderData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1OrderFilterOrder({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1OrderFilterOrderQueryKey(options),
    });
};

export const getApiV1OrderFilterUserOrderQueryKey = (
    options?: Options<GetApiV1OrderFilterUserOrderData>,
) => createQueryKey("getApiV1OrderFilterUserOrder", options);

export const getApiV1OrderFilterUserOrderOptions = (
    options?: Options<GetApiV1OrderFilterUserOrderData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1OrderFilterUserOrder({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1OrderFilterUserOrderQueryKey(options),
    });
};

export const getApiV1ProductGetProductByFilterQueryKey = (
    options?: Options<GetApiV1ProductGetProductByFilterData>,
) => createQueryKey("getApiV1ProductGetProductByFilter", options);

export const getApiV1ProductGetProductByFilterOptions = (
    options?: Options<GetApiV1ProductGetProductByFilterData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1ProductGetProductByFilter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1ProductGetProductByFilterQueryKey(options),
    });
};

export const postApiV1ProductAddProductQueryKey = (
    options?: Options<PostApiV1ProductAddProductData>,
) => createQueryKey("postApiV1ProductAddProduct", options);

export const postApiV1ProductAddProductOptions = (
    options?: Options<PostApiV1ProductAddProductData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1ProductAddProduct({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1ProductAddProductQueryKey(options),
    });
};

export const postApiV1ProductAddProductMutation = (
    options?: Partial<Options<PostApiV1ProductAddProductData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1ProductAddProductResponse,
        AxiosError<DefaultError>,
        Options<PostApiV1ProductAddProductData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1ProductAddProduct({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1ProductAddVpnProductQueryKey = (
    options?: Options<PostApiV1ProductAddVpnProductData>,
) => createQueryKey("postApiV1ProductAddVpnProduct", options);

export const postApiV1ProductAddVpnProductOptions = (
    options?: Options<PostApiV1ProductAddVpnProductData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1ProductAddVpnProduct({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1ProductAddVpnProductQueryKey(options),
    });
};

export const postApiV1ProductAddVpnProductMutation = (
    options?: Partial<Options<PostApiV1ProductAddVpnProductData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1ProductAddVpnProductResponse,
        AxiosError<DefaultError>,
        Options<PostApiV1ProductAddVpnProductData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1ProductAddVpnProduct({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1RegistryAddQueryKey = (
    options?: Options<PostApiV1RegistryAddData>,
) => createQueryKey("postApiV1RegistryAdd", options);

export const postApiV1RegistryAddOptions = (
    options?: Options<PostApiV1RegistryAddData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1RegistryAdd({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1RegistryAddQueryKey(options),
    });
};

export const postApiV1RegistryAddMutation = (
    options?: Partial<Options<PostApiV1RegistryAddData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1RegistryAddResponse,
        AxiosError<PostApiV1RegistryAddError>,
        Options<PostApiV1RegistryAddData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1RegistryAdd({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1RegistryFilterQueryKey = (
    options?: Options<GetApiV1RegistryFilterData>,
) => createQueryKey("getApiV1RegistryFilter", options);

export const getApiV1RegistryFilterOptions = (
    options?: Options<GetApiV1RegistryFilterData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1RegistryFilter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1RegistryFilterQueryKey(options),
    });
};

export const getApiV1RegistryFilterAllQueryKey = (
    options?: Options<GetApiV1RegistryFilterAllData>,
) => createQueryKey("getApiV1RegistryFilterAll", options);

export const getApiV1RegistryFilterAllOptions = (
    options?: Options<GetApiV1RegistryFilterAllData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1RegistryFilterAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1RegistryFilterAllQueryKey(options),
    });
};

export const putApiV1RegistryUpdateMutation = (
    options?: Partial<Options<PutApiV1RegistryUpdateData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1RegistryUpdateResponse,
        AxiosError<PutApiV1RegistryUpdateError>,
        Options<PutApiV1RegistryUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1RegistryUpdate({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1RegistryUploadRegistryTransactionImagesQueryKey = (
    options?: Options<PostApiV1RegistryUploadRegistryTransactionImagesData>,
) =>
    createQueryKey("postApiV1RegistryUploadRegistryTransactionImages", options);

export const postApiV1RegistryUploadRegistryTransactionImagesOptions = (
    options?: Options<PostApiV1RegistryUploadRegistryTransactionImagesData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1RegistryUploadRegistryTransactionImages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1RegistryUploadRegistryTransactionImagesQueryKey(options),
    });
};

export const postApiV1RegistryUploadRegistryTransactionImagesMutation = (
    options?: Partial<
        Options<PostApiV1RegistryUploadRegistryTransactionImagesData>
    >,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1RegistryUploadRegistryTransactionImagesResponse,
        AxiosError<PostApiV1RegistryUploadRegistryTransactionImagesError>,
        Options<PostApiV1RegistryUploadRegistryTransactionImagesData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1RegistryUploadRegistryTransactionImages({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1SanaeiGetInboundsListQueryKey = (
    options?: Options<GetApiV1SanaeiGetInboundsListData>,
) => createQueryKey("getApiV1SanaeiGetInboundsList", options);

export const getApiV1SanaeiGetInboundsListOptions = (
    options?: Options<GetApiV1SanaeiGetInboundsListData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1SanaeiGetInboundsList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1SanaeiGetInboundsListQueryKey(options),
    });
};

export const getApiV1SanaeiGetInboundsByIdQueryKey = (
    options?: Options<GetApiV1SanaeiGetInboundsByIdData>,
) => createQueryKey("getApiV1SanaeiGetInboundsById", options);

export const getApiV1SanaeiGetInboundsByIdOptions = (
    options?: Options<GetApiV1SanaeiGetInboundsByIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1SanaeiGetInboundsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1SanaeiGetInboundsByIdQueryKey(options),
    });
};

export const postApiV1SanaeiAddInboundQueryKey = (
    options?: Options<PostApiV1SanaeiAddInboundData>,
) => createQueryKey("postApiV1SanaeiAddInbound", options);

export const postApiV1SanaeiAddInboundOptions = (
    options?: Options<PostApiV1SanaeiAddInboundData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1SanaeiAddInbound({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1SanaeiAddInboundQueryKey(options),
    });
};

export const postApiV1SanaeiAddInboundMutation = (
    options?: Partial<Options<PostApiV1SanaeiAddInboundData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1SanaeiAddInboundResponse,
        AxiosError<PostApiV1SanaeiAddInboundError>,
        Options<PostApiV1SanaeiAddInboundData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1SanaeiAddInbound({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const putApiV1SanaeiUpdateInboundMutation = (
    options?: Partial<Options<PutApiV1SanaeiUpdateInboundData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1SanaeiUpdateInboundResponse,
        AxiosError<PutApiV1SanaeiUpdateInboundError>,
        Options<PutApiV1SanaeiUpdateInboundData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1SanaeiUpdateInbound({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const deleteApiV1SanaeiDeleteInboundMutation = (
    options?: Partial<Options<DeleteApiV1SanaeiDeleteInboundData>>,
) => {
    const mutationOptions: UseMutationOptions<
        DeleteApiV1SanaeiDeleteInboundResponse,
        AxiosError<DeleteApiV1SanaeiDeleteInboundError>,
        Options<DeleteApiV1SanaeiDeleteInboundData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await deleteApiV1SanaeiDeleteInbound({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1SanaeiGetClientConfigQueryKey = (
    options?: Options<PostApiV1SanaeiGetClientConfigData>,
) => createQueryKey("postApiV1SanaeiGetClientConfig", options);

export const postApiV1SanaeiGetClientConfigOptions = (
    options?: Options<PostApiV1SanaeiGetClientConfigData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1SanaeiGetClientConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1SanaeiGetClientConfigQueryKey(options),
    });
};

export const postApiV1SanaeiGetClientConfigMutation = (
    options?: Partial<Options<PostApiV1SanaeiGetClientConfigData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1SanaeiGetClientConfigResponse,
        AxiosError<DefaultError>,
        Options<PostApiV1SanaeiGetClientConfigData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1SanaeiGetClientConfig({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1ServerAddServerQueryKey = (
    options?: Options<PostApiV1ServerAddServerData>,
) => createQueryKey("postApiV1ServerAddServer", options);

export const postApiV1ServerAddServerOptions = (
    options?: Options<PostApiV1ServerAddServerData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1ServerAddServer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1ServerAddServerQueryKey(options),
    });
};

export const postApiV1ServerAddServerMutation = (
    options?: Partial<Options<PostApiV1ServerAddServerData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1ServerAddServerResponse,
        AxiosError<PostApiV1ServerAddServerError>,
        Options<PostApiV1ServerAddServerData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1ServerAddServer({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1ServerGetServersQueryKey = (
    options?: Options<GetApiV1ServerGetServersData>,
) => createQueryKey("getApiV1ServerGetServers", options);

export const getApiV1ServerGetServersOptions = (
    options?: Options<GetApiV1ServerGetServersData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1ServerGetServers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1ServerGetServersQueryKey(options),
    });
};

export const getApiV1ServerGetServerByIdQueryKey = (
    options?: Options<GetApiV1ServerGetServerByIdData>,
) => createQueryKey("getApiV1ServerGetServerById", options);

export const getApiV1ServerGetServerByIdOptions = (
    options?: Options<GetApiV1ServerGetServerByIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1ServerGetServerById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1ServerGetServerByIdQueryKey(options),
    });
};

export const getApiV1ServerFilterServersQueryKey = (
    options?: Options<GetApiV1ServerFilterServersData>,
) => createQueryKey("getApiV1ServerFilterServers", options);

export const getApiV1ServerFilterServersOptions = (
    options?: Options<GetApiV1ServerFilterServersData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1ServerFilterServers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1ServerFilterServersQueryKey(options),
    });
};

export const postApiV1TelegramAddTelegramBotQueryKey = (
    options?: Options<PostApiV1TelegramAddTelegramBotData>,
) => createQueryKey("postApiV1TelegramAddTelegramBot", options);

export const postApiV1TelegramAddTelegramBotOptions = (
    options?: Options<PostApiV1TelegramAddTelegramBotData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1TelegramAddTelegramBot({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1TelegramAddTelegramBotQueryKey(options),
    });
};

export const postApiV1TelegramAddTelegramBotMutation = (
    options?: Partial<Options<PostApiV1TelegramAddTelegramBotData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1TelegramAddTelegramBotResponse,
        AxiosError<PostApiV1TelegramAddTelegramBotError>,
        Options<PostApiV1TelegramAddTelegramBotData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1TelegramAddTelegramBot({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const putApiV1TelegramStopTelegramBotByIdMutation = (
    options?: Partial<Options<PutApiV1TelegramStopTelegramBotByIdData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1TelegramStopTelegramBotByIdResponse,
        AxiosError<DefaultError>,
        Options<PutApiV1TelegramStopTelegramBotByIdData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1TelegramStopTelegramBotById({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const putApiV1TelegramStartTelegramBotByIdMutation = (
    options?: Partial<Options<PutApiV1TelegramStartTelegramBotByIdData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1TelegramStartTelegramBotByIdResponse,
        AxiosError<DefaultError>,
        Options<PutApiV1TelegramStartTelegramBotByIdData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1TelegramStartTelegramBotById({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1TransactionAddTransactionQueryKey = (
    options?: Options<PostApiV1TransactionAddTransactionData>,
) => createQueryKey("postApiV1TransactionAddTransaction", options);

export const postApiV1TransactionAddTransactionOptions = (
    options?: Options<PostApiV1TransactionAddTransactionData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1TransactionAddTransaction({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1TransactionAddTransactionQueryKey(options),
    });
};

export const postApiV1TransactionAddTransactionMutation = (
    options?: Partial<Options<PostApiV1TransactionAddTransactionData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1TransactionAddTransactionResponse,
        AxiosError<PostApiV1TransactionAddTransactionError>,
        Options<PostApiV1TransactionAddTransactionData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1TransactionAddTransaction({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const putApiV1TransactionUpdateTransactionStatusMutation = (
    options?: Partial<Options<PutApiV1TransactionUpdateTransactionStatusData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1TransactionUpdateTransactionStatusResponse,
        AxiosError<PutApiV1TransactionUpdateTransactionStatusError>,
        Options<PutApiV1TransactionUpdateTransactionStatusData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1TransactionUpdateTransactionStatus({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1TransactionFilterTransactionQueryKey = (
    options?: Options<GetApiV1TransactionFilterTransactionData>,
) => createQueryKey("getApiV1TransactionFilterTransaction", options);

export const getApiV1TransactionFilterTransactionOptions = (
    options?: Options<GetApiV1TransactionFilterTransactionData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1TransactionFilterTransaction({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1TransactionFilterTransactionQueryKey(options),
    });
};

export const getApiV1TransactionGetTransactionByIdQueryKey = (
    options: Options<GetApiV1TransactionGetTransactionByIdData>,
) => createQueryKey("getApiV1TransactionGetTransactionById", options);

export const getApiV1TransactionGetTransactionByIdOptions = (
    options: Options<GetApiV1TransactionGetTransactionByIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1TransactionGetTransactionById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1TransactionGetTransactionByIdQueryKey(options),
    });
};

export const postApiV1TransactionAddTransactionDetailQueryKey = (
    options?: Options<PostApiV1TransactionAddTransactionDetailData>,
) => createQueryKey("postApiV1TransactionAddTransactionDetail", options);

export const postApiV1TransactionAddTransactionDetailOptions = (
    options?: Options<PostApiV1TransactionAddTransactionDetailData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1TransactionAddTransactionDetail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1TransactionAddTransactionDetailQueryKey(options),
    });
};

export const postApiV1TransactionAddTransactionDetailMutation = (
    options?: Partial<Options<PostApiV1TransactionAddTransactionDetailData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1TransactionAddTransactionDetailResponse,
        AxiosError<PostApiV1TransactionAddTransactionDetailError>,
        Options<PostApiV1TransactionAddTransactionDetailData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1TransactionAddTransactionDetail({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1TransactionGetTransactionDetailQueryKey = (
    options?: Options<GetApiV1TransactionGetTransactionDetailData>,
) => createQueryKey("getApiV1TransactionGetTransactionDetail", options);

export const getApiV1TransactionGetTransactionDetailOptions = (
    options?: Options<GetApiV1TransactionGetTransactionDetailData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1TransactionGetTransactionDetail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1TransactionGetTransactionDetailQueryKey(options),
    });
};

export const postApiV1TransactionIncreaseBalanceByUserIdQueryKey = (
    options: Options<PostApiV1TransactionIncreaseBalanceByUserIdData>,
) => createQueryKey("postApiV1TransactionIncreaseBalanceByUserId", options);

export const postApiV1TransactionIncreaseBalanceByUserIdOptions = (
    options: Options<PostApiV1TransactionIncreaseBalanceByUserIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1TransactionIncreaseBalanceByUserId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1TransactionIncreaseBalanceByUserIdQueryKey(options),
    });
};

export const postApiV1TransactionIncreaseBalanceByUserIdMutation = (
    options?: Partial<Options<PostApiV1TransactionIncreaseBalanceByUserIdData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1TransactionIncreaseBalanceByUserIdResponse,
        AxiosError<PostApiV1TransactionIncreaseBalanceByUserIdError>,
        Options<PostApiV1TransactionIncreaseBalanceByUserIdData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1TransactionIncreaseBalanceByUserId({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1TransactionDecreaseBalanceByUserIdQueryKey = (
    options: Options<PostApiV1TransactionDecreaseBalanceByUserIdData>,
) => createQueryKey("postApiV1TransactionDecreaseBalanceByUserId", options);

export const postApiV1TransactionDecreaseBalanceByUserIdOptions = (
    options: Options<PostApiV1TransactionDecreaseBalanceByUserIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1TransactionDecreaseBalanceByUserId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1TransactionDecreaseBalanceByUserIdQueryKey(options),
    });
};

export const postApiV1TransactionDecreaseBalanceByUserIdMutation = (
    options?: Partial<Options<PostApiV1TransactionDecreaseBalanceByUserIdData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1TransactionDecreaseBalanceByUserIdResponse,
        AxiosError<PostApiV1TransactionDecreaseBalanceByUserIdError>,
        Options<PostApiV1TransactionDecreaseBalanceByUserIdData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1TransactionDecreaseBalanceByUserId({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1UserLoginQueryKey = (
    options?: Options<PostApiV1UserLoginData>,
) => createQueryKey("postApiV1UserLogin", options);

export const postApiV1UserLoginOptions = (
    options?: Options<PostApiV1UserLoginData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1UserLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1UserLoginQueryKey(options),
    });
};

export const postApiV1UserLoginMutation = (
    options?: Partial<Options<PostApiV1UserLoginData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1UserLoginResponse,
        AxiosError<PostApiV1UserLoginError>,
        Options<PostApiV1UserLoginData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1UserLogin({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1UserRegisterQueryKey = (
    options?: Options<PostApiV1UserRegisterData>,
) => createQueryKey("postApiV1UserRegister", options);

export const postApiV1UserRegisterOptions = (
    options?: Options<PostApiV1UserRegisterData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1UserRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1UserRegisterQueryKey(options),
    });
};

export const postApiV1UserRegisterMutation = (
    options?: Partial<Options<PostApiV1UserRegisterData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1UserRegisterResponse,
        AxiosError<PostApiV1UserRegisterError>,
        Options<PostApiV1UserRegisterData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1UserRegister({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1UserForgetPasswordQueryKey = (
    options?: Options<PostApiV1UserForgetPasswordData>,
) => createQueryKey("postApiV1UserForgetPassword", options);

export const postApiV1UserForgetPasswordOptions = (
    options?: Options<PostApiV1UserForgetPasswordData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1UserForgetPassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1UserForgetPasswordQueryKey(options),
    });
};

export const postApiV1UserForgetPasswordMutation = (
    options?: Partial<Options<PostApiV1UserForgetPasswordData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1UserForgetPasswordResponse,
        AxiosError<PostApiV1UserForgetPasswordError>,
        Options<PostApiV1UserForgetPasswordData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1UserForgetPassword({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1UserGetUsersByFilterQueryKey = (
    options?: Options<GetApiV1UserGetUsersByFilterData>,
) => createQueryKey("getApiV1UserGetUsersByFilter", options);

export const getApiV1UserGetUsersByFilterOptions = (
    options?: Options<GetApiV1UserGetUsersByFilterData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1UserGetUsersByFilter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1UserGetUsersByFilterQueryKey(options),
    });
};

export const getApiV1UserGetAgentUsersFilterQueryKey = (
    options?: Options<GetApiV1UserGetAgentUsersFilterData>,
) => createQueryKey("getApiV1UserGetAgentUsersFilter", options);

export const getApiV1UserGetAgentUsersFilterOptions = (
    options?: Options<GetApiV1UserGetAgentUsersFilterData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1UserGetAgentUsersFilter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1UserGetAgentUsersFilterQueryKey(options),
    });
};

export const getApiV1UserGetInformationQueryKey = (
    options?: Options<GetApiV1UserGetInformationData>,
) => createQueryKey("getApiV1UserGetInformation", options);

export const getApiV1UserGetInformationOptions = (
    options?: Options<GetApiV1UserGetInformationData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1UserGetInformation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1UserGetInformationQueryKey(options),
    });
};

export const getApiV1UserGetUserByIdQueryKey = (
    options: Options<GetApiV1UserGetUserByIdData>,
) => createQueryKey("getApiV1UserGetUserById", options);

export const getApiV1UserGetUserByIdOptions = (
    options: Options<GetApiV1UserGetUserByIdData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1UserGetUserById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1UserGetUserByIdQueryKey(options),
    });
};

export const getApiV1UserGetMeQueryKey = (
    options?: Options<GetApiV1UserGetMeData>,
) => createQueryKey("getApiV1UserGetMe", options);

export const getApiV1UserGetMeOptions = (
    options?: Options<GetApiV1UserGetMeData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1UserGetMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1UserGetMeQueryKey(options),
    });
};

export const getApiV1UserGetAgentUsersQueryKey = (
    options?: Options<GetApiV1UserGetAgentUsersData>,
) => createQueryKey("getApiV1UserGetAgentUsers", options);

export const getApiV1UserGetAgentUsersOptions = (
    options?: Options<GetApiV1UserGetAgentUsersData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1UserGetAgentUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1UserGetAgentUsersQueryKey(options),
    });
};

export const putApiV1UserUpdateProfileMutation = (
    options?: Partial<Options<PutApiV1UserUpdateProfileData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1UserUpdateProfileResponse,
        AxiosError<PutApiV1UserUpdateProfileError>,
        Options<PutApiV1UserUpdateProfileData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1UserUpdateProfile({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const putApiV1UserUpdateUserMutation = (
    options?: Partial<Options<PutApiV1UserUpdateUserData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PutApiV1UserUpdateUserResponse,
        AxiosError<PutApiV1UserUpdateUserError>,
        Options<PutApiV1UserUpdateUserData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await putApiV1UserUpdateUser({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1UserSendMobileActiveCodeQueryKey = (
    options?: Options<PostApiV1UserSendMobileActiveCodeData>,
) => createQueryKey("postApiV1UserSendMobileActiveCode", options);

export const postApiV1UserSendMobileActiveCodeOptions = (
    options?: Options<PostApiV1UserSendMobileActiveCodeData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1UserSendMobileActiveCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1UserSendMobileActiveCodeQueryKey(options),
    });
};

export const postApiV1UserSendMobileActiveCodeMutation = (
    options?: Partial<Options<PostApiV1UserSendMobileActiveCodeData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1UserSendMobileActiveCodeResponse,
        AxiosError<PostApiV1UserSendMobileActiveCodeError>,
        Options<PostApiV1UserSendMobileActiveCodeData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1UserSendMobileActiveCode({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postApiV1UserAddUserQueryKey = (
    options?: Options<PostApiV1UserAddUserData>,
) => createQueryKey("postApiV1UserAddUser", options);

export const postApiV1UserAddUserOptions = (
    options?: Options<PostApiV1UserAddUserData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1UserAddUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1UserAddUserQueryKey(options),
    });
};

export const postApiV1UserAddUserMutation = (
    options?: Partial<Options<PostApiV1UserAddUserData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1UserAddUserResponse,
        AxiosError<PostApiV1UserAddUserError>,
        Options<PostApiV1UserAddUserData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1UserAddUser({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getApiV1VpnGetVpnsQueryKey = (
    options?: Options<GetApiV1VpnGetVpnsData>,
) => createQueryKey("getApiV1VpnGetVpns", options);

export const getApiV1VpnGetVpnsOptions = (
    options?: Options<GetApiV1VpnGetVpnsData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await getApiV1VpnGetVpns({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getApiV1VpnGetVpnsQueryKey(options),
    });
};

export const postApiV1VpnBuyVpnQueryKey = (
    options?: Options<PostApiV1VpnBuyVpnData>,
) => createQueryKey("postApiV1VpnBuyVpn", options);

export const postApiV1VpnBuyVpnOptions = (
    options?: Options<PostApiV1VpnBuyVpnData>,
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await postApiV1VpnBuyVpn({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postApiV1VpnBuyVpnQueryKey(options),
    });
};

export const postApiV1VpnBuyVpnMutation = (
    options?: Partial<Options<PostApiV1VpnBuyVpnData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostApiV1VpnBuyVpnResponse,
        AxiosError<DefaultError>,
        Options<PostApiV1VpnBuyVpnData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await postApiV1VpnBuyVpn({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};
