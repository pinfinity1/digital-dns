// This file is auto-generated by @hey-api/openapi-ts

import type {
  GetApiV1AgentAgentsReachedNegativeLimitResponse,
  GetApiV1AgentAgentsReachedNegativeNotLimitResponse,
  GetApiV1AgentAgencyInformationResponse,
  GetApiV1AgentGetAgentRequestsResponse,
  GetApiV1AgentProfitReportResponse,
  GetApiV1AgentInputUserReportResponse,
  GetApiV1AppleGetAppleIdTypeResponse,
  GetApiV1AppleFilterAppleIdResponse,
  PostApiV1AppleAddAppleIdResponse,
  GetApiV1AppleGetAppleIdByIdByIdResponse,
  GetApiV1AuthorizationGetUserRolePermissionsResponse,
  GetApiV1AuthorizationGetRolesForUserUserByUserIdRolesResponse,
  GetApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsResponse,
  GetApiV1AuthorizationGetAllRolesRolesResponse,
  GetApiV1AuthorizationGetAllPermissionsPermissionsResponse,
  PostApiV1CategoryGetCategoriesResponse,
  PostApiV1CategoryGetCategoryResponse,
  GetApiV1CountryGetCountrisResponse,
  GetApiV1MarzbanGetMarzbanServerResponse,
  GetApiV1MarzbanGetMarzbanServersResponse,
  PostApiV1MarzbanGetMarzbanServerNodeSettingsResponse,
  GetApiV1MarzbanGetMarzbanServerNodeByIdResponse,
  PutApiV1MarzbanUpdateMarzbanServerNodeResponse,
  GetApiV1MarzbanGetMarzbanServerNodesResponse,
  GetApiV1MarzbanGetMarzbanVpnResponse,
  GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdResponse,
  GetApiV1NotificationGetNotificationsResponse,
  GetApiV1OrderFilterOrderResponse,
  GetApiV1OrderFilterUserOrderResponse,
  GetApiV1ProductGetProductByFilterResponse,
  GetApiV1RegistryFilterResponse,
  GetApiV1RegistryFilterAllResponse,
  GetApiV1SanaeiGetInboundsListResponse,
  GetApiV1SanaeiGetInboundsByIdResponse,
  GetApiV1ServerGetServersResponse,
  GetApiV1ServerFilterServersResponse,
  PostApiV1TelegramAddTelegramBotResponse,
  GetApiV1TransactionFilterTransactionResponse,
  GetApiV1TransactionGetTransactionByIdResponse,
  GetApiV1TransactionGetTransactionDetailResponse,
  GetApiV1UserGetUsersByFilterResponse,
  GetApiV1UserGetAgentUsersFilterResponse,
  GetApiV1VpnGetVpnsResponse,
} from "./types.gen";

const userDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.agentId) {
    data.agentId = BigInt(data.agentId.toString());
  }
  if (data.modifiedDate) {
    data.modifiedDate = new Date(data.modifiedDate);
  }
  if (data.balance) {
    data.balance = BigInt(data.balance.toString());
  }
  if (data.chatId) {
    data.chatId = BigInt(data.chatId.toString());
  }
  if (data.createDate) {
    data.createDate = new Date(data.createDate);
  }
  if (data.agency) {
    data.agency = agentDtoSchemaResponseTransformer(data.agency);
  }
  return data;
};

const agentDtoSchemaResponseTransformer = (data: any) => {
  if (data.disabledAccountTime) {
    data.disabledAccountTime = new Date(data.disabledAccountTime);
  }
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.agentAdminId) {
    data.agentAdminId = BigInt(data.agentAdminId.toString());
  }
  if (data.agentCode) {
    data.agentCode = BigInt(data.agentCode.toString());
  }
  if (data.transactionDetailId) {
    data.transactionDetailId = BigInt(data.transactionDetailId.toString());
  }
  if (data.agentPercent) {
    data.agentPercent = BigInt(data.agentPercent.toString());
  }
  if (data.userPercent) {
    data.userPercent = BigInt(data.userPercent.toString());
  }
  if (data.specialPercent) {
    data.specialPercent = BigInt(data.specialPercent.toString());
  }
  if (data.user) {
    data.user = userDtoSchemaResponseTransformer(data.user);
  }
  if (data.amountWithNegative) {
    data.amountWithNegative = BigInt(data.amountWithNegative.toString());
  }
  if (data.negativeChargeCeiling) {
    data.negativeChargeCeiling = BigInt(data.negativeChargeCeiling.toString());
  }
  return data;
};

const agentDtoListApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return agentDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiV1AgentAgentsReachedNegativeLimitResponseTransformer =
  async (
    data: any,
  ): Promise<GetApiV1AgentAgentsReachedNegativeLimitResponse> => {
    data = agentDtoListApiResultSchemaResponseTransformer(data);
    return data;
  };

export const getApiV1AgentAgentsReachedNegativeNotLimitResponseTransformer =
  async (
    data: any,
  ): Promise<GetApiV1AgentAgentsReachedNegativeNotLimitResponse> => {
    data = agentDtoListApiResultSchemaResponseTransformer(data);
    return data;
  };

const agencyInformationDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.agentAdminId) {
    data.agentAdminId = BigInt(data.agentAdminId.toString());
  }
  if (data.agentCode) {
    data.agentCode = BigInt(data.agentCode.toString());
  }
  if (data.transactionDetailId) {
    data.transactionDetailId = BigInt(data.transactionDetailId.toString());
  }
  if (data.agentPercent) {
    data.agentPercent = BigInt(data.agentPercent.toString());
  }
  if (data.userPercent) {
    data.userPercent = BigInt(data.userPercent.toString());
  }
  if (data.maximumAmountForAgent) {
    data.maximumAmountForAgent = BigInt(data.maximumAmountForAgent.toString());
  }
  if (data.minimalAmountForAgent) {
    data.minimalAmountForAgent = BigInt(data.minimalAmountForAgent.toString());
  }
  if (data.maximumAmountForUser) {
    data.maximumAmountForUser = BigInt(data.maximumAmountForUser.toString());
  }
  if (data.minimalAmountForUser) {
    data.minimalAmountForUser = BigInt(data.minimalAmountForUser.toString());
  }
  return data;
};

const agencyInformationDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = agencyInformationDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1AgentAgencyInformationResponseTransformer = async (
  data: any,
): Promise<GetApiV1AgentAgencyInformationResponse> => {
  data = agencyInformationDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const agentRequestDtoSchemaResponseTransformer = (data: any) => {
  if (data.createDate) {
    data.createDate = new Date(data.createDate);
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  if (data.agentPercent) {
    data.agentPercent = BigInt(data.agentPercent.toString());
  }
  if (data.userPercent) {
    data.userPercent = BigInt(data.userPercent.toString());
  }
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  return data;
};

const agentRequestDtoListApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return agentRequestDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiV1AgentGetAgentRequestsResponseTransformer = async (
  data: any,
): Promise<GetApiV1AgentGetAgentRequestsResponse> => {
  data = agentRequestDtoListApiResultSchemaResponseTransformer(data);
  return data;
};

const agentIncomeDtoSchemaResponseTransformer = (data: any) => {
  if (data.agentId) {
    data.agentId = BigInt(data.agentId.toString());
  }
  if (data.profit) {
    data.profit = BigInt(data.profit.toString());
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  if (data.createDate) {
    data.createDate = new Date(data.createDate);
  }
  return data;
};

const filterProfitReportDtoSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return agentIncomeDtoSchemaResponseTransformer(item);
    });
  }
  if (data.startDate) {
    data.startDate = new Date(data.startDate);
  }
  if (data.endDate) {
    data.endDate = new Date(data.endDate);
  }
  if (data.agentId) {
    data.agentId = BigInt(data.agentId.toString());
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  return data;
};

const filterProfitReportDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = filterProfitReportDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1AgentProfitReportResponseTransformer = async (
  data: any,
): Promise<GetApiV1AgentProfitReportResponse> => {
  data = filterProfitReportDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const inputUserReportDtoSchemaResponseTransformer = (data: any) => {
  if (data.date) {
    data.date = new Date(data.date);
  }
  return data;
};

const filterInputUserReportDtoSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return inputUserReportDtoSchemaResponseTransformer(item);
    });
  }
  if (data.startDate) {
    data.startDate = new Date(data.startDate);
  }
  if (data.endDate) {
    data.endDate = new Date(data.endDate);
  }
  if (data.agentId) {
    data.agentId = BigInt(data.agentId.toString());
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  return data;
};

const filterInputUserReportDtoApiResultSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = filterInputUserReportDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1AgentInputUserReportResponseTransformer = async (
  data: any,
): Promise<GetApiV1AgentInputUserReportResponse> => {
  data = filterInputUserReportDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const getAppleIdTypeDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.price) {
    data.price = BigInt(data.price.toString());
  }
  return data;
};

export const getApiV1AppleGetAppleIdTypeResponseTransformer = async (
  data: any,
): Promise<GetApiV1AppleGetAppleIdTypeResponse> => {
  data = data.map((item: any) => {
    return getAppleIdTypeDtoSchemaResponseTransformer(item);
  });
  return data;
};

const appleIdDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.birthDay) {
    data.birthDay = new Date(data.birthDay);
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  if (data.orderId) {
    data.orderId = BigInt(data.orderId.toString());
  }
  if (data.createDate) {
    data.createDate = new Date(data.createDate);
  }
  if (data.modifiedDate) {
    data.modifiedDate = new Date(data.modifiedDate);
  }
  if (data.appleIdTypeId) {
    data.appleIdTypeId = BigInt(data.appleIdTypeId.toString());
  }
  return data;
};

const filterAppleIdSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return appleIdDtoSchemaResponseTransformer(item);
    });
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  if (data.type) {
    data.type = BigInt(data.type.toString());
  }
  return data;
};

export const getApiV1AppleFilterAppleIdResponseTransformer = async (
  data: any,
): Promise<GetApiV1AppleFilterAppleIdResponse> => {
  data = filterAppleIdSchemaResponseTransformer(data);
  return data;
};

const categorySchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.createDate) {
    data.createDate = new Date(data.createDate);
  }
  if (data.modifiedDate) {
    data.modifiedDate = new Date(data.modifiedDate);
  }
  if (data.createBy) {
    data.createBy = BigInt(data.createBy.toString());
  }
  if (data.modifyBy) {
    data.modifyBy = BigInt(data.modifyBy.toString());
  }
  if (data.products) {
    data.products = data.products.map((item: any) => {
      return productSchemaResponseTransformer(item);
    });
  }
  return data;
};

const productSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.createDate) {
    data.createDate = new Date(data.createDate);
  }
  if (data.modifiedDate) {
    data.modifiedDate = new Date(data.modifiedDate);
  }
  if (data.createBy) {
    data.createBy = BigInt(data.createBy.toString());
  }
  if (data.modifyBy) {
    data.modifyBy = BigInt(data.modifyBy.toString());
  }
  data.price = BigInt(data.price.toString());
  if (data.categoryId) {
    data.categoryId = BigInt(data.categoryId.toString());
  }
  if (data.vpnId) {
    data.vpnId = BigInt(data.vpnId.toString());
  }
  if (data.appleIdTypes) {
    data.appleIdTypes = data.appleIdTypes.map((item: any) => {
      return appleIdTypeSchemaResponseTransformer(item);
    });
  }
  if (data.category) {
    data.category = categorySchemaResponseTransformer(data.category);
  }
  return data;
};

const appleIdTypeSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.createDate) {
    data.createDate = new Date(data.createDate);
  }
  if (data.modifiedDate) {
    data.modifiedDate = new Date(data.modifiedDate);
  }
  if (data.createBy) {
    data.createBy = BigInt(data.createBy.toString());
  }
  if (data.modifyBy) {
    data.modifyBy = BigInt(data.modifyBy.toString());
  }
  if (data.productId) {
    data.productId = BigInt(data.productId.toString());
  }
  if (data.product) {
    data.product = productSchemaResponseTransformer(data.product);
  }
  if (data.price) {
    data.price = BigInt(data.price.toString());
  }
  if (data.appleIds) {
    data.appleIds = data.appleIds.map((item: any) => {
      return appleIdSchemaResponseTransformer(item);
    });
  }
  return data;
};

const appleIdSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.createDate) {
    data.createDate = new Date(data.createDate);
  }
  if (data.modifiedDate) {
    data.modifiedDate = new Date(data.modifiedDate);
  }
  if (data.createBy) {
    data.createBy = BigInt(data.createBy.toString());
  }
  if (data.modifyBy) {
    data.modifyBy = BigInt(data.modifyBy.toString());
  }
  if (data.appleIdTypeId) {
    data.appleIdTypeId = BigInt(data.appleIdTypeId.toString());
  }
  if (data.appleIdType) {
    data.appleIdType = appleIdTypeSchemaResponseTransformer(data.appleIdType);
  }
  if (data.birthDay) {
    data.birthDay = new Date(data.birthDay);
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  if (data.orderId) {
    data.orderId = BigInt(data.orderId.toString());
  }
  if (data.assignSupporterUserId) {
    data.assignSupporterUserId = BigInt(data.assignSupporterUserId.toString());
  }
  return data;
};

export const postApiV1AppleAddAppleIdResponseTransformer = async (
  data: any,
): Promise<PostApiV1AppleAddAppleIdResponse> => {
  data = appleIdSchemaResponseTransformer(data);
  return data;
};

export const getApiV1AppleGetAppleIdByIdByIdResponseTransformer = async (
  data: any,
): Promise<GetApiV1AppleGetAppleIdByIdByIdResponse> => {
  data = appleIdDtoSchemaResponseTransformer(data);
  return data;
};

const permissionSchemaResponseTransformer = (data: any) => {
  if (data.permissionId) {
    data.permissionId = BigInt(data.permissionId.toString());
  }
  return data;
};

const userRolePermissionsDtoSchemaResponseTransformer = (data: any) => {
  if (data.roleId) {
    data.roleId = BigInt(data.roleId.toString());
  }
  if (data.permissions) {
    data.permissions = data.permissions.map((item: any) => {
      return permissionSchemaResponseTransformer(item);
    });
  }
  return data;
};

const userRolePermissionsDtoListApiResultSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return userRolePermissionsDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiV1AuthorizationGetUserRolePermissionsResponseTransformer =
  async (
    data: any,
  ): Promise<GetApiV1AuthorizationGetUserRolePermissionsResponse> => {
    data = userRolePermissionsDtoListApiResultSchemaResponseTransformer(data);
    return data;
  };

const roleDtoSchemaResponseTransformer = (data: any) => {
  if (data.roleId) {
    data.roleId = BigInt(data.roleId.toString());
  }
  return data;
};

const roleDtoListApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return roleDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiV1AuthorizationGetRolesForUserUserByUserIdRolesResponseTransformer =
  async (
    data: any,
  ): Promise<GetApiV1AuthorizationGetRolesForUserUserByUserIdRolesResponse> => {
    data = roleDtoListApiResultSchemaResponseTransformer(data);
    return data;
  };

const permissionDtoSchemaResponseTransformer = (data: any) => {
  if (data.permissionId) {
    data.permissionId = BigInt(data.permissionId.toString());
  }
  return data;
};

const permissionDtoListApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return permissionDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsResponseTransformer =
  async (
    data: any,
  ): Promise<GetApiV1AuthorizationGetPermissionsForRoleRoleByRoleIdPermissionsResponse> => {
    data = permissionDtoListApiResultSchemaResponseTransformer(data);
    return data;
  };

export const getApiV1AuthorizationGetAllRolesRolesResponseTransformer = async (
  data: any,
): Promise<GetApiV1AuthorizationGetAllRolesRolesResponse> => {
  data = roleDtoListApiResultSchemaResponseTransformer(data);
  return data;
};

export const getApiV1AuthorizationGetAllPermissionsPermissionsResponseTransformer =
  async (
    data: any,
  ): Promise<GetApiV1AuthorizationGetAllPermissionsPermissionsResponse> => {
    data = permissionDtoListApiResultSchemaResponseTransformer(data);
    return data;
  };

const categoryDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  return data;
};

const categoryDtoListApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return categoryDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const postApiV1CategoryGetCategoriesResponseTransformer = async (
  data: any,
): Promise<PostApiV1CategoryGetCategoriesResponse> => {
  data = categoryDtoListApiResultSchemaResponseTransformer(data);
  return data;
};

const categoryDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = categoryDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const postApiV1CategoryGetCategoryResponseTransformer = async (
  data: any,
): Promise<PostApiV1CategoryGetCategoryResponse> => {
  data = categoryDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const countryDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  return data;
};

const countryDtoListApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return countryDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiV1CountryGetCountrisResponseTransformer = async (
  data: any,
): Promise<GetApiV1CountryGetCountrisResponse> => {
  data = countryDtoListApiResultSchemaResponseTransformer(data);
  return data;
};

const getMarzbanServerOptionDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.userPrice) {
    data.userPrice = BigInt(data.userPrice.toString());
  }
  return data;
};

export const getApiV1MarzbanGetMarzbanServerResponseTransformer = async (
  data: any,
): Promise<GetApiV1MarzbanGetMarzbanServerResponse> => {
  data = getMarzbanServerOptionDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiV1MarzbanGetMarzbanServersResponseTransformer = async (
  data: any,
): Promise<GetApiV1MarzbanGetMarzbanServersResponse> => {
  data = data.map((item: any) => {
    return getMarzbanServerOptionDtoSchemaResponseTransformer(item);
  });
  return data;
};

const marzbanNodeDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  return data;
};

export const postApiV1MarzbanGetMarzbanServerNodeSettingsResponseTransformer =
  async (
    data: any,
  ): Promise<PostApiV1MarzbanGetMarzbanServerNodeSettingsResponse> => {
    data = marzbanNodeDtoSchemaResponseTransformer(data);
    return data;
  };

export const getApiV1MarzbanGetMarzbanServerNodeByIdResponseTransformer =
  async (
    data: any,
  ): Promise<GetApiV1MarzbanGetMarzbanServerNodeByIdResponse> => {
    data = marzbanNodeDtoSchemaResponseTransformer(data);
    return data;
  };

export const putApiV1MarzbanUpdateMarzbanServerNodeResponseTransformer = async (
  data: any,
): Promise<PutApiV1MarzbanUpdateMarzbanServerNodeResponse> => {
  data = marzbanNodeDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiV1MarzbanGetMarzbanServerNodesResponseTransformer = async (
  data: any,
): Promise<GetApiV1MarzbanGetMarzbanServerNodesResponse> => {
  data = data.map((item: any) => {
    return marzbanNodeDtoSchemaResponseTransformer(item);
  });
  return data;
};

const agentsIncomesDetailDtoSchemaResponseTransformer = (data: any) => {
  if (data.agentId) {
    data.agentId = BigInt(data.agentId.toString());
  }
  if (data.profit) {
    data.profit = BigInt(data.profit.toString());
  }
  if (data.orderDetailId) {
    data.orderDetailId = BigInt(data.orderDetailId.toString());
  }
  return data;
};

const agentsIncomesDetailByPriceDtoSchemaResponseTransformer = (data: any) => {
  if (data.agentsIncomesDetail) {
    data.agentsIncomesDetail = data.agentsIncomesDetail.map((item: any) => {
      return agentsIncomesDetailDtoSchemaResponseTransformer(item);
    });
  }
  if (data.price) {
    data.price = BigInt(data.price.toString());
  }
  if (data.dayPrice) {
    data.dayPrice = BigInt(data.dayPrice.toString());
  }
  if (data.gbPrice) {
    data.gbPrice = BigInt(data.gbPrice.toString());
  }
  return data;
};

const getMarzbanVpnDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.gbMax) {
    data.gbMax = BigInt(data.gbMax.toString());
  }
  if (data.gbMin) {
    data.gbMin = BigInt(data.gbMin.toString());
  }
  if (data.gbPrice) {
    data.gbPrice = BigInt(data.gbPrice.toString());
  }
  if (data.dayMax) {
    data.dayMax = BigInt(data.dayMax.toString());
  }
  if (data.dayMin) {
    data.dayMin = BigInt(data.dayMin.toString());
  }
  if (data.dayPrice) {
    data.dayPrice = BigInt(data.dayPrice.toString());
  }
  if (data.marzbanServerId) {
    data.marzbanServerId = BigInt(data.marzbanServerId.toString());
  }
  if (data.test_Days) {
    data.test_Days = BigInt(data.test_Days.toString());
  }
  if (data.test_TotalGb) {
    data.test_TotalGb = BigInt(data.test_TotalGb.toString());
  }
  if (data.agentsIncomesDetailByPrice) {
    data.agentsIncomesDetailByPrice =
      agentsIncomesDetailByPriceDtoSchemaResponseTransformer(
        data.agentsIncomesDetailByPrice,
      );
  }
  return data;
};

export const getApiV1MarzbanGetMarzbanVpnResponseTransformer = async (
  data: any,
): Promise<GetApiV1MarzbanGetMarzbanVpnResponse> => {
  data = data.map((item: any) => {
    return getMarzbanVpnDtoSchemaResponseTransformer(item);
  });
  return data;
};

const marzbanVpnTemplateDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.price) {
    data.price = BigInt(data.price.toString());
  }
  if (data.marzbanVpnId) {
    data.marzbanVpnId = BigInt(data.marzbanVpnId.toString());
  }
  return data;
};

export const getApiV1MarzbanGetMarzbanVpnTemplateByVpnIdResponseTransformer =
  async (
    data: any,
  ): Promise<GetApiV1MarzbanGetMarzbanVpnTemplateByVpnIdResponse> => {
    data = data.map((item: any) => {
      return marzbanVpnTemplateDtoSchemaResponseTransformer(item);
    });
    return data;
  };

const notificationDtoSchemaResponseTransformer = (data: any) => {
  if (data.expire) {
    data.expire = new Date(data.expire);
  }
  if (data.botId) {
    data.botId = BigInt(data.botId.toString());
  }
  if (data.chatId) {
    data.chatId = BigInt(data.chatId.toString());
  }
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.forwardChatId) {
    data.forwardChatId = BigInt(data.forwardChatId.toString());
  }
  return data;
};

export const getApiV1NotificationGetNotificationsResponseTransformer = async (
  data: any,
): Promise<GetApiV1NotificationGetNotificationsResponse> => {
  data = data.map((item: any) => {
    return notificationDtoSchemaResponseTransformer(item);
  });
  return data;
};

const productDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  data.price = BigInt(data.price.toString());
  if (data.categoryId) {
    data.categoryId = BigInt(data.categoryId.toString());
  }
  return data;
};

const clientInOrderSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  return data;
};

const marzbanUserDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.expire) {
    data.expire = BigInt(data.expire.toString());
  }
  if (data.data_Limit) {
    data.data_Limit = BigInt(data.data_Limit.toString());
  }
  if (data.sub_Updated_At) {
    data.sub_Updated_At = new Date(data.sub_Updated_At);
  }
  if (data.online_At) {
    data.online_At = new Date(data.online_At);
  }
  if (data.on_Hold_Expire_Duration) {
    data.on_Hold_Expire_Duration = BigInt(
      data.on_Hold_Expire_Duration.toString(),
    );
  }
  if (data.used_Traffic) {
    data.used_Traffic = BigInt(data.used_Traffic.toString());
  }
  if (data.lifetime_Used_Traffic) {
    data.lifetime_Used_Traffic = BigInt(data.lifetime_Used_Traffic.toString());
  }
  if (data.created_At) {
    data.created_At = new Date(data.created_At);
  }
  if (data.marzbanVpnId) {
    data.marzbanVpnId = BigInt(data.marzbanVpnId.toString());
  }
  if (data.marzbanServerId) {
    data.marzbanServerId = BigInt(data.marzbanServerId.toString());
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  if (data.orderDeatilId) {
    data.orderDeatilId = BigInt(data.orderDeatilId.toString());
  }
  if (data.chatId) {
    data.chatId = BigInt(data.chatId.toString());
  }
  if (data.orderId) {
    data.orderId = BigInt(data.orderId.toString());
  }
  return data;
};

const orderDetailDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.productPrice) {
    data.productPrice = BigInt(data.productPrice.toString());
  }
  if (data.product) {
    data.product = productDtoSchemaResponseTransformer(data.product);
  }
  if (data.clients) {
    data.clients = data.clients.map((item: any) => {
      return clientInOrderSchemaResponseTransformer(item);
    });
  }
  if (data.marzbanUsers) {
    data.marzbanUsers = data.marzbanUsers.map((item: any) => {
      return marzbanUserDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

const orderDtoSchemaResponseTransformer = (data: any) => {
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  if (data.paymentDate) {
    data.paymentDate = new Date(data.paymentDate);
  }
  if (data.tracingCode) {
    data.tracingCode = BigInt(data.tracingCode.toString());
  }
  if (data.orderDetail) {
    data.orderDetail = data.orderDetail.map((item: any) => {
      return orderDetailDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

const filterOrderDtoSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return orderDtoSchemaResponseTransformer(item);
    });
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  return data;
};

const filterOrderDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = filterOrderDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1OrderFilterOrderResponseTransformer = async (
  data: any,
): Promise<GetApiV1OrderFilterOrderResponse> => {
  data = filterOrderDtoApiResultSchemaResponseTransformer(data);
  return data;
};

export const getApiV1OrderFilterUserOrderResponseTransformer = async (
  data: any,
): Promise<GetApiV1OrderFilterUserOrderResponse> => {
  data = filterOrderDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const filterProductDtoSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return productDtoSchemaResponseTransformer(item);
    });
  }
  if (data.categoryId) {
    data.categoryId = BigInt(data.categoryId.toString());
  }
  return data;
};

const filterProductDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = filterProductDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1ProductGetProductByFilterResponseTransformer = async (
  data: any,
): Promise<GetApiV1ProductGetProductByFilterResponse> => {
  data = filterProductDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const registryDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.createDate) {
    data.createDate = new Date(data.createDate);
  }
  if (data.modifiedDate) {
    data.modifiedDate = new Date(data.modifiedDate);
  }
  if (data.createBy) {
    data.createBy = BigInt(data.createBy.toString());
  }
  if (data.price) {
    data.price = BigInt(data.price.toString());
  }
  return data;
};

const filterRegistryDtoSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return registryDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

const filterRegistryDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = filterRegistryDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1RegistryFilterResponseTransformer = async (
  data: any,
): Promise<GetApiV1RegistryFilterResponse> => {
  data = filterRegistryDtoApiResultSchemaResponseTransformer(data);
  return data;
};

export const getApiV1RegistryFilterAllResponseTransformer = async (
  data: any,
): Promise<GetApiV1RegistryFilterAllResponse> => {
  data = filterRegistryDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const clientDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.inboundId) {
    data.inboundId = BigInt(data.inboundId.toString());
  }
  if (data.up) {
    data.up = BigInt(data.up.toString());
  }
  if (data.down) {
    data.down = BigInt(data.down.toString());
  }
  if (data.expiryTime) {
    data.expiryTime = BigInt(data.expiryTime.toString());
  }
  if (data.total) {
    data.total = BigInt(data.total.toString());
  }
  if (data.reset) {
    data.reset = BigInt(data.reset.toString());
  }
  return data;
};

const sanaeiInboundDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.up) {
    data.up = BigInt(data.up.toString());
  }
  if (data.down) {
    data.down = BigInt(data.down.toString());
  }
  if (data.total) {
    data.total = BigInt(data.total.toString());
  }
  if (data.expiryTime) {
    data.expiryTime = BigInt(data.expiryTime.toString());
  }
  if (data.clientStats) {
    data.clientStats = data.clientStats.map((item: any) => {
      return clientDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

const sanaeiInboundDtoListApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return sanaeiInboundDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiV1SanaeiGetInboundsListResponseTransformer = async (
  data: any,
): Promise<GetApiV1SanaeiGetInboundsListResponse> => {
  data = sanaeiInboundDtoListApiResultSchemaResponseTransformer(data);
  return data;
};

const inboundDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.up) {
    data.up = BigInt(data.up.toString());
  }
  if (data.down) {
    data.down = BigInt(data.down.toString());
  }
  if (data.total) {
    data.total = BigInt(data.total.toString());
  }
  if (data.port) {
    data.port = BigInt(data.port.toString());
  }
  if (data.expiryTime) {
    data.expiryTime = BigInt(data.expiryTime.toString());
  }
  return data;
};

const inboundDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = inboundDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1SanaeiGetInboundsByIdResponseTransformer = async (
  data: any,
): Promise<GetApiV1SanaeiGetInboundsByIdResponse> => {
  data = inboundDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const serverDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.countryId) {
    data.countryId = BigInt(data.countryId.toString());
  }
  return data;
};

const serverDtoListApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return serverDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiV1ServerGetServersResponseTransformer = async (
  data: any,
): Promise<GetApiV1ServerGetServersResponse> => {
  data = serverDtoListApiResultSchemaResponseTransformer(data);
  return data;
};

const filterServerDtoSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return serverDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

const filterServerDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = filterServerDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1ServerFilterServersResponseTransformer = async (
  data: any,
): Promise<GetApiV1ServerFilterServersResponse> => {
  data = filterServerDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const addTelegramBotDtoSchemaResponseTransformer = (data: any) => {
  if (data.agentId) {
    data.agentId = BigInt(data.agentId.toString());
  }
  if (data.botId) {
    data.botId = BigInt(data.botId.toString());
  }
  return data;
};

export const postApiV1TelegramAddTelegramBotResponseTransformer = async (
  data: any,
): Promise<PostApiV1TelegramAddTelegramBotResponse> => {
  data = addTelegramBotDtoSchemaResponseTransformer(data);
  return data;
};

const transactionDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.price) {
    data.price = BigInt(data.price.toString());
  }
  if (data.transactionTime) {
    data.transactionTime = new Date(data.transactionTime);
  }
  if (data.transactionCode) {
    data.transactionCode = BigInt(data.transactionCode.toString());
  }
  if (data.createBy) {
    data.createBy = BigInt(data.createBy.toString());
  }
  if (data.chatId) {
    data.chatId = BigInt(data.chatId.toString());
  }
  if (data.transactionDetailId) {
    data.transactionDetailId = BigInt(data.transactionDetailId.toString());
  }
  if (data.balance) {
    data.balance = BigInt(data.balance.toString());
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  return data;
};

const filterTransactionDtoSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return transactionDtoSchemaResponseTransformer(item);
    });
  }
  if (data.details) {
    data.details = BigInt(data.details.toString());
  }
  if (data.startDate) {
    data.startDate = new Date(data.startDate);
  }
  if (data.endDate) {
    data.endDate = new Date(data.endDate);
  }
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  return data;
};

const filterTransactionDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = filterTransactionDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1TransactionFilterTransactionResponseTransformer = async (
  data: any,
): Promise<GetApiV1TransactionFilterTransactionResponse> => {
  data = filterTransactionDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const transactionDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = transactionDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1TransactionGetTransactionByIdResponseTransformer = async (
  data: any,
): Promise<GetApiV1TransactionGetTransactionByIdResponse> => {
  data = transactionDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const transactionDetailDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.maximumAmountForAgent) {
    data.maximumAmountForAgent = BigInt(data.maximumAmountForAgent.toString());
  }
  if (data.minimalAmountForAgent) {
    data.minimalAmountForAgent = BigInt(data.minimalAmountForAgent.toString());
  }
  if (data.maximumAmountForUser) {
    data.maximumAmountForUser = BigInt(data.maximumAmountForUser.toString());
  }
  if (data.minimalAmountForUser) {
    data.minimalAmountForUser = BigInt(data.minimalAmountForUser.toString());
  }
  if (data.agentId) {
    data.agentId = BigInt(data.agentId.toString());
  }
  if (data.userPercent) {
    data.userPercent = BigInt(data.userPercent.toString());
  }
  if (data.agentPercent) {
    data.agentPercent = BigInt(data.agentPercent.toString());
  }
  return data;
};

const transactionDetailDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = transactionDetailDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1TransactionGetTransactionDetailResponseTransformer =
  async (
    data: any,
  ): Promise<GetApiV1TransactionGetTransactionDetailResponse> => {
    data = transactionDetailDtoApiResultSchemaResponseTransformer(data);
    return data;
  };

const filterUsersDtoSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return userDtoSchemaResponseTransformer(item);
    });
  }
  if (data.agentId) {
    data.agentId = BigInt(data.agentId.toString());
  }
  return data;
};

const filterUsersDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = filterUsersDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1UserGetUsersByFilterResponseTransformer = async (
  data: any,
): Promise<GetApiV1UserGetUsersByFilterResponse> => {
  data = filterUsersDtoApiResultSchemaResponseTransformer(data);
  return data;
};

export const getApiV1UserGetAgentUsersFilterResponseTransformer = async (
  data: any,
): Promise<GetApiV1UserGetAgentUsersFilterResponse> => {
  data = filterUsersDtoApiResultSchemaResponseTransformer(data);
  return data;
};

const vpnDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.price) {
    data.price = BigInt(data.price.toString());
  }
  if (data.days) {
    data.days = BigInt(data.days.toString());
  }
  if (data.serverId) {
    data.serverId = BigInt(data.serverId.toString());
  }
  if (data.numberUser) {
    data.numberUser = BigInt(data.numberUser.toString());
  }
  return data;
};

const filterVpnDtoSchemaResponseTransformer = (data: any) => {
  if (data.entities) {
    data.entities = data.entities.map((item: any) => {
      return vpnDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

const filterVpnDtoApiResultSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = filterVpnDtoSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getApiV1VpnGetVpnsResponseTransformer = async (
  data: any,
): Promise<GetApiV1VpnGetVpnsResponse> => {
  data = filterVpnDtoApiResultSchemaResponseTransformer(data);
  return data;
};
