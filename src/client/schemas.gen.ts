// This file is auto-generated by @hey-api/openapi-ts

export const AddAgentDtoSchema = {
  type: "object",
  properties: {
    brandName: {
      maxLength: 300,
      type: "string",
      nullable: true,
    },
    persianBrandName: {
      maxLength: 300,
      type: "string",
      nullable: true,
    },
    agentAdminId: {
      type: "integer",
      format: "int64",
    },
    brandAddress: {
      type: "string",
      nullable: true,
    },
    agentPercent: {
      type: "integer",
      format: "int32",
    },
    userPercent: {
      type: "integer",
      format: "int32",
    },
    addTransactionDetail: {
      $ref: "#/components/schemas/AddTransactionDetailDto",
    },
  },
  additionalProperties: false,
} as const;

export const AddAppleIdDtoSchema = {
  required: [
    "answer1",
    "answer2",
    "answer3",
    "appleIdTypeId",
    "birthDay",
    "comparePassword",
    "email",
    "password",
    "question1",
    "question2",
    "question3",
  ],
  type: "object",
  properties: {
    appleIdTypeId: {
      type: "integer",
      format: "int64",
    },
    email: {
      minLength: 1,
      type: "string",
      format: "email",
    },
    phone: {
      type: "string",
      nullable: true,
    },
    password: {
      minLength: 1,
      type: "string",
    },
    comparePassword: {
      minLength: 1,
      type: "string",
    },
    birthDay: {
      type: "string",
      format: "date-time",
    },
    question1: {
      minLength: 1,
      type: "string",
    },
    answer1: {
      minLength: 1,
      type: "string",
    },
    question2: {
      minLength: 1,
      type: "string",
    },
    answer2: {
      minLength: 1,
      type: "string",
    },
    question3: {
      minLength: 1,
      type: "string",
    },
    answer3: {
      minLength: 1,
      type: "string",
    },
  },
  additionalProperties: false,
} as const;

export const AddCategoryDtoSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const AddCategoryDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/AddCategoryDto",
    },
  },
  additionalProperties: false,
} as const;

export const AddCountryDtoSchema = {
  required: ["name"],
  type: "object",
  properties: {
    name: {
      maxLength: 20,
      minLength: 1,
      type: "string",
    },
  },
  additionalProperties: false,
} as const;

export const AddInboundSchema = {
  type: "object",
  properties: {
    up: {
      type: "integer",
      format: "int64",
    },
    down: {
      type: "integer",
      format: "int64",
    },
    total: {
      type: "integer",
      format: "int64",
    },
    listen: {
      type: "string",
      nullable: true,
    },
    remark: {
      type: "string",
      nullable: true,
    },
    enable: {
      type: "boolean",
    },
    port: {
      type: "integer",
      format: "int64",
    },
    expiryTime: {
      type: "integer",
      format: "int64",
    },
    protocol: {
      type: "string",
      nullable: true,
    },
    settings: {
      type: "string",
      nullable: true,
    },
    streamSettings: {
      type: "string",
      nullable: true,
    },
    sniffing: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const AddInboundDtoSchema = {
  type: "object",
  properties: {
    serverId: {
      type: "integer",
      format: "int64",
    },
    inbound: {
      $ref: "#/components/schemas/AddInbound",
    },
  },
  additionalProperties: false,
} as const;

export const AddMarzbanNodeDtoSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      nullable: true,
    },
    address: {
      type: "string",
      nullable: true,
    },
    port: {
      type: "integer",
      format: "int32",
    },
    api_Port: {
      type: "integer",
      format: "int32",
    },
    add_As_New_Host: {
      type: "boolean",
    },
    usage_Coefficient: {
      type: "number",
      format: "double",
    },
  },
  additionalProperties: false,
} as const;

export const AddMarzbanServerDtoSchema = {
  required: ["password", "serverIp", "serverName", "serverPort", "userName"],
  type: "object",
  properties: {
    serverName: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    serverIp: {
      maxLength: 40,
      minLength: 1,
      type: "string",
    },
    serverPort: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    ssl: {
      type: "boolean",
    },
    path: {
      type: "string",
      nullable: true,
    },
    userName: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    password: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    users: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AddMarzbanVpnDtoSchema = {
  required: [
    "dayMax",
    "dayMin",
    "dayPrice",
    "gbMax",
    "gbMin",
    "gbPrice",
    "name",
  ],
  type: "object",
  properties: {
    name: {
      maxLength: 50,
      minLength: 1,
      type: "string",
    },
    gbMax: {
      type: "integer",
      format: "int32",
    },
    gbMin: {
      type: "integer",
      format: "int32",
    },
    gbPrice: {
      type: "integer",
      format: "int64",
    },
    dayMax: {
      type: "integer",
      format: "int32",
    },
    dayMin: {
      type: "integer",
      format: "int32",
    },
    dayPrice: {
      type: "integer",
      format: "int64",
    },
    test_Active: {
      type: "boolean",
    },
    test_Days: {
      type: "integer",
      format: "int32",
    },
    test_TotalMg: {
      type: "integer",
      format: "int32",
    },
    vmess: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    vless: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    shadowsocks: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    trojan: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    marzbanServerId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AddMarzbanVpnTemplatesDtoSchema = {
  required: ["title"],
  type: "object",
  properties: {
    title: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    price: {
      type: "integer",
      format: "int64",
    },
    days: {
      type: "integer",
      format: "int32",
    },
    gb: {
      type: "integer",
      format: "int32",
    },
    marzbanVpnId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AddMenuDtoSchema = {
  required: ["title"],
  type: "object",
  properties: {
    parentId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    title: {
      maxLength: 300,
      minLength: 1,
      type: "string",
    },
    active: {
      type: "boolean",
    },
    icon: {
      maxLength: 50,
      type: "string",
      nullable: true,
    },
    link: {
      maxLength: 200,
      type: "string",
      nullable: true,
    },
    sorted: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const AddNotificationDtoSchema = {
  type: "object",
  properties: {
    message: {
      type: "string",
      nullable: true,
    },
    expire: {
      type: "string",
      format: "date-time",
    },
    notificationType: {
      $ref: "#/components/schemas/NotificationType",
    },
    forAllMember: {
      type: "boolean",
    },
    userId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    buttons: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ButtonJsonDto",
      },
      nullable: true,
    },
    fileAddress: {
      type: "string",
      nullable: true,
    },
    fileCaption: {
      type: "string",
      nullable: true,
    },
    forward: {
      type: "boolean",
    },
    forwardChatId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    messageId: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const AddProductDtoSchema = {
  required: ["price", "productName"],
  type: "object",
  properties: {
    productName: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    price: {
      type: "integer",
      format: "int64",
    },
    categoryId: {
      type: "integer",
      format: "int64",
    },
    description: {
      maxLength: 1000,
      type: "string",
      nullable: true,
    },
    productType: {
      $ref: "#/components/schemas/ProductType",
    },
  },
  additionalProperties: false,
} as const;

export const AddProductToOrderDtoSchema = {
  type: "object",
  properties: {
    productId: {
      type: "integer",
      format: "int64",
    },
    count: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const AddRegistryDtoSchema = {
  required: ["acceptTheRules", "imeI_1", "phone"],
  type: "object",
  properties: {
    imeI_1: {
      maxLength: 16,
      minLength: 1,
      type: "string",
    },
    imeI_2: {
      maxLength: 16,
      type: "string",
      nullable: true,
    },
    acceptTheRules: {
      type: "boolean",
    },
    summery: {
      maxLength: 500,
      type: "string",
      nullable: true,
    },
    forWho: {
      maxLength: 50,
      type: "string",
      nullable: true,
    },
    phone: {
      maxLength: 11,
      minLength: 1,
      type: "string",
    },
  },
  additionalProperties: false,
} as const;

export const AddRequestAgentDtoSchema = {
  type: "object",
  properties: {
    brandName: {
      maxLength: 300,
      type: "string",
      nullable: true,
    },
    persianBrandName: {
      maxLength: 300,
      type: "string",
      nullable: true,
    },
    brandAddress: {
      type: "string",
      nullable: true,
    },
    agentPercent: {
      type: "integer",
      format: "int64",
    },
    userPercent: {
      type: "integer",
      format: "int64",
    },
    description: {
      type: "string",
      nullable: true,
    },
    phone: {
      type: "string",
      nullable: true,
    },
    transactionDetial: {
      $ref: "#/components/schemas/AddTransactionDetailDto",
    },
  },
  additionalProperties: false,
} as const;

export const AddServerDtoSchema = {
  required: [
    "password",
    "port",
    "serverAddress",
    "serverName",
    "subDomain",
    "subPath",
    "userName",
  ],
  type: "object",
  properties: {
    serverName: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    serverAddress: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    userName: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    password: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    port: {
      minLength: 1,
      type: "string",
    },
    subPort: {
      type: "string",
      nullable: true,
    },
    subPath: {
      minLength: 1,
      type: "string",
    },
    subDomain: {
      minLength: 1,
      type: "string",
    },
    serverStatus: {
      $ref: "#/components/schemas/ServerStatus",
    },
    countryId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AddTelegramBotDtoSchema = {
  type: "object",
  properties: {
    token: {
      maxLength: 200,
      type: "string",
      nullable: true,
    },
    name: {
      maxLength: 50,
      type: "string",
      nullable: true,
    },
    persionName: {
      maxLength: 100,
      type: "string",
      nullable: true,
    },
    description: {
      maxLength: 3000,
      type: "string",
      nullable: true,
    },
    route: {
      maxLength: 300,
      type: "string",
      nullable: true,
    },
    hostAddress: {
      maxLength: 300,
      type: "string",
      nullable: true,
    },
    secretToken: {
      maxLength: 300,
      type: "string",
      nullable: true,
    },
    link: {
      type: "string",
      nullable: true,
    },
    agentId: {
      type: "integer",
      format: "int64",
    },
    botId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AddTransactionDetailDtoSchema = {
  type: "object",
  properties: {
    maximumAmountForAgent: {
      type: "integer",
      format: "int64",
    },
    minimalAmountForAgent: {
      type: "integer",
      format: "int64",
    },
    maximumAmountForUser: {
      type: "integer",
      format: "int64",
    },
    minimalAmountForUser: {
      type: "integer",
      format: "int64",
    },
    cardNumber: {
      maxLength: 50,
      type: "string",
      nullable: true,
    },
    cardHolderName: {
      maxLength: 300,
      type: "string",
      nullable: true,
    },
    description: {
      maxLength: 3000,
      type: "string",
      nullable: true,
    },
    agentId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AddTransactionDtoSchema = {
  required: ["price", "transactionType"],
  type: "object",
  properties: {
    title: {
      maxLength: 200,
      type: "string",
      nullable: true,
    },
    price: {
      type: "integer",
      format: "int64",
    },
    description: {
      maxLength: 200,
      type: "string",
      nullable: true,
    },
    transactionType: {
      $ref: "#/components/schemas/TransactionType",
    },
    accountName: {
      maxLength: 200,
      type: "string",
      nullable: true,
    },
    transactionTime: {
      type: "string",
      format: "date-time",
    },
    cardNumber: {
      type: "string",
      nullable: true,
    },
    bankName: {
      maxLength: 200,
      type: "string",
      nullable: true,
    },
    avatarTransaction: {
      type: "string",
      format: "binary",
      nullable: true,
    },
    transactionDetailId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AgencyInformationDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    brandName: {
      type: "string",
      nullable: true,
    },
    persianBrandName: {
      type: "string",
      nullable: true,
    },
    agentAdminId: {
      type: "integer",
      format: "int64",
    },
    agentCode: {
      type: "integer",
      format: "int64",
    },
    brandAddress: {
      type: "string",
      nullable: true,
    },
    transactionDetailId: {
      type: "integer",
      format: "int64",
    },
    agentPercent: {
      type: "integer",
      format: "int64",
    },
    userPercent: {
      type: "integer",
      format: "int64",
    },
    allowNegative: {
      type: "boolean",
    },
    maximumAmountForAgent: {
      type: "integer",
      format: "int64",
    },
    minimalAmountForAgent: {
      type: "integer",
      format: "int64",
    },
    maximumAmountForUser: {
      type: "integer",
      format: "int64",
    },
    minimalAmountForUser: {
      type: "integer",
      format: "int64",
    },
    cardNumber: {
      type: "string",
      nullable: true,
    },
    cardHolderName: {
      type: "string",
      nullable: true,
    },
    description: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const AgencyInformationDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/AgencyInformationDto",
    },
  },
  additionalProperties: false,
} as const;

export const AgentDtoSchema = {
  type: "object",
  properties: {
    disabledAccountTime: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    agentPath: {
      $ref: "#/components/schemas/HierarchyId",
    },
    id: {
      type: "integer",
      format: "int64",
    },
    brandName: {
      type: "string",
      nullable: true,
    },
    persianBrandName: {
      type: "string",
      nullable: true,
    },
    agentAdminId: {
      type: "integer",
      format: "int64",
    },
    agentCode: {
      type: "integer",
      format: "int64",
    },
    brandAddress: {
      type: "string",
      nullable: true,
    },
    agentRequestStatus: {
      type: "string",
      nullable: true,
    },
    transactionDetailId: {
      type: "integer",
      format: "int64",
    },
    agentPercent: {
      type: "integer",
      format: "int64",
    },
    userPercent: {
      type: "integer",
      format: "int64",
    },
    specialPercent: {
      type: "integer",
      format: "int64",
    },
    user: {
      $ref: "#/components/schemas/UserDto",
    },
    allowNegative: {
      type: "boolean",
    },
    amountWithNegative: {
      type: "integer",
      format: "int64",
    },
    negativeChargeCeiling: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AgentDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/AgentDto",
    },
  },
  additionalProperties: false,
} as const;

export const AgentDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const AgentIncomeDtoSchema = {
  type: "object",
  properties: {
    agentId: {
      type: "integer",
      format: "int64",
    },
    profit: {
      type: "integer",
      format: "int64",
    },
    userId: {
      type: "integer",
      format: "int64",
    },
    createDate: {
      type: "string",
      format: "date-time",
    },
  },
  additionalProperties: false,
} as const;

export const AgentRequestDtoSchema = {
  type: "object",
  properties: {
    createDate: {
      type: "string",
      format: "date-time",
    },
    userId: {
      type: "integer",
      format: "int64",
    },
    userName: {
      type: "string",
      nullable: true,
    },
    brandName: {
      type: "string",
      nullable: true,
    },
    persianBrandName: {
      type: "string",
      nullable: true,
    },
    brandAddress: {
      type: "string",
      nullable: true,
    },
    agentPercent: {
      type: "integer",
      format: "int64",
    },
    userPercent: {
      type: "integer",
      format: "int64",
    },
    description: {
      type: "string",
      nullable: true,
    },
    maximumAmount: {
      type: "integer",
      format: "int32",
    },
    minimalAmount: {
      type: "integer",
      format: "int32",
    },
    cardNumber: {
      type: "string",
      nullable: true,
    },
    cardHolderName: {
      type: "string",
      nullable: true,
    },
    paymentDescription: {
      type: "string",
      nullable: true,
    },
    agentRequestStatus: {
      type: "string",
      nullable: true,
    },
    id: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AgentRequestDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentRequestDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const AgentTreeDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    brandName: {
      type: "string",
      nullable: true,
    },
    adminName: {
      type: "string",
      nullable: true,
    },
    mobile: {
      type: "string",
      nullable: true,
    },
    email: {
      type: "string",
      nullable: true,
    },
    persianBrandName: {
      type: "string",
      nullable: true,
    },
    agentAdminId: {
      type: "integer",
      format: "int64",
    },
    agentCode: {
      type: "integer",
      format: "int64",
    },
    brandAddress: {
      type: "string",
      nullable: true,
    },
    agentPercent: {
      type: "integer",
      format: "int64",
    },
    userPercent: {
      type: "integer",
      format: "int64",
    },
    cardNumber: {
      type: "string",
      nullable: true,
    },
    agentRequestStatus: {
      type: "string",
      nullable: true,
    },
    telegramBotId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    subAgents: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentTreeDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const AgentTreeDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/AgentTreeDto",
    },
  },
  additionalProperties: false,
} as const;

export const AgentsIncomesDetailByPriceDtoSchema = {
  type: "object",
  properties: {
    agentsIncomesDetail: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentsIncomesDetailDto",
      },
      nullable: true,
    },
    price: {
      type: "integer",
      format: "int64",
    },
    dayPrice: {
      type: "integer",
      format: "int64",
    },
    gbPrice: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AgentsIncomesDetailDtoSchema = {
  type: "object",
  properties: {
    agentId: {
      type: "integer",
      format: "int64",
    },
    profit: {
      type: "integer",
      format: "int64",
    },
    orderDetailId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const AnimationSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    width: {
      type: "integer",
      format: "int32",
    },
    height: {
      type: "integer",
      format: "int32",
    },
    duration: {
      type: "integer",
      format: "int32",
    },
    thumbnail: {
      $ref: "#/components/schemas/PhotoSize",
    },
    fileName: {
      type: "string",
      nullable: true,
    },
    mimeType: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ApiResultStatusCodeSchema = {
  enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -99, -5, -4, -3, -2, -1],
  type: "integer",
  format: "int32",
} as const;

export const AppleIdSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    createDate: {
      type: "string",
      format: "date-time",
    },
    modifiedDate: {
      type: "string",
      format: "date-time",
    },
    createBy: {
      type: "integer",
      format: "int64",
    },
    modifyBy: {
      type: "integer",
      format: "int64",
    },
    isDelete: {
      type: "boolean",
    },
    appleIdTypeId: {
      type: "integer",
      format: "int64",
    },
    appleIdType: {
      $ref: "#/components/schemas/AppleIdType",
    },
    email: {
      type: "string",
      nullable: true,
    },
    phone: {
      type: "string",
      nullable: true,
    },
    password: {
      type: "string",
      nullable: true,
    },
    birthDay: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    question1: {
      type: "string",
      nullable: true,
    },
    answer1: {
      type: "string",
      nullable: true,
    },
    question2: {
      type: "string",
      nullable: true,
    },
    answer2: {
      type: "string",
      nullable: true,
    },
    question3: {
      type: "string",
      nullable: true,
    },
    answer3: {
      type: "string",
      nullable: true,
    },
    userId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    orderId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    assignSupporterUserId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    sendToWarranty: {
      type: "boolean",
    },
    status: {
      $ref: "#/components/schemas/AppleIdStatus",
    },
  },
  additionalProperties: false,
} as const;

export const AppleIdDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    status: {
      $ref: "#/components/schemas/AppleIdStatus",
    },
    email: {
      type: "string",
      nullable: true,
    },
    phone: {
      type: "string",
      nullable: true,
    },
    password: {
      type: "string",
      nullable: true,
    },
    birthDay: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    question1: {
      type: "string",
      nullable: true,
    },
    answer1: {
      type: "string",
      nullable: true,
    },
    question2: {
      type: "string",
      nullable: true,
    },
    answer2: {
      type: "string",
      nullable: true,
    },
    question3: {
      type: "string",
      nullable: true,
    },
    answer3: {
      type: "string",
      nullable: true,
    },
    userId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    orderId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    createBy: {
      type: "string",
      nullable: true,
    },
    modifyBy: {
      type: "string",
      nullable: true,
    },
    createDate: {
      type: "string",
      format: "date-time",
    },
    modifiedDate: {
      type: "string",
      format: "date-time",
    },
    appleIdTypeId: {
      type: "integer",
      format: "int64",
    },
    sendToWarranty: {
      type: "boolean",
    },
    buyer: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const AppleIdStatusSchema = {
  enum: [0, 1, 2, 3, 4, 5],
  type: "integer",
  format: "int32",
} as const;

export const AppleIdTypeSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    createDate: {
      type: "string",
      format: "date-time",
    },
    modifiedDate: {
      type: "string",
      format: "date-time",
    },
    createBy: {
      type: "integer",
      format: "int64",
    },
    modifyBy: {
      type: "integer",
      format: "int64",
    },
    isDelete: {
      type: "boolean",
    },
    productId: {
      type: "integer",
      format: "int64",
    },
    product: {
      $ref: "#/components/schemas/Product",
    },
    title: {
      type: "string",
      nullable: true,
    },
    price: {
      type: "integer",
      format: "int64",
    },
    warranty: {
      type: "boolean",
    },
    warrantyDay: {
      type: "integer",
      format: "int32",
    },
    appleIds: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AppleId",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const AudioSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    duration: {
      type: "integer",
      format: "int32",
    },
    performer: {
      type: "string",
      nullable: true,
    },
    title: {
      type: "string",
      nullable: true,
    },
    fileName: {
      type: "string",
      nullable: true,
    },
    mimeType: {
      type: "string",
      nullable: true,
    },
    thumbnail: {
      $ref: "#/components/schemas/PhotoSize",
    },
  },
  additionalProperties: false,
} as const;

export const ButtonJsonDtoSchema = {
  type: "object",
  properties: {
    text: {
      type: "string",
      nullable: true,
    },
    callbackQuery: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const BuyMarzbanVpnDtoSchema = {
  required: ["title"],
  type: "object",
  properties: {
    count: {
      type: "integer",
      format: "int32",
    },
    title: {
      maxLength: 50,
      minLength: 1,
      type: "string",
    },
    marzbanVpnId: {
      type: "integer",
      format: "int64",
    },
    totalGb: {
      type: "integer",
      format: "int32",
    },
    totalDay: {
      type: "integer",
      format: "int32",
    },
    marzbanVpnTemplateId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    marzbanUserId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const CallbackGameSchema = {
  type: "object",
  additionalProperties: false,
} as const;

export const CallbackQuerySchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: true,
    },
    from: {
      $ref: "#/components/schemas/User",
    },
    message: {
      $ref: "#/components/schemas/Message",
    },
    inlineMessageId: {
      type: "string",
      nullable: true,
    },
    chatInstance: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "string",
      nullable: true,
    },
    gameShortName: {
      type: "string",
      nullable: true,
    },
    isGameQuery: {
      type: "boolean",
      readOnly: true,
    },
  },
  additionalProperties: false,
} as const;

export const CategorySchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    createDate: {
      type: "string",
      format: "date-time",
    },
    modifiedDate: {
      type: "string",
      format: "date-time",
    },
    createBy: {
      type: "integer",
      format: "int64",
    },
    modifyBy: {
      type: "integer",
      format: "int64",
    },
    isDelete: {
      type: "boolean",
    },
    title: {
      type: "string",
      nullable: true,
    },
    categoryType: {
      $ref: "#/components/schemas/CategoryType",
    },
    products: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Product",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const CategoryDtoSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      nullable: true,
    },
    id: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const CategoryDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/CategoryDto",
    },
  },
  additionalProperties: false,
} as const;

export const CategoryDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CategoryDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const CategoryTypeSchema = {
  enum: [0, 1, 2],
  type: "integer",
  format: "int32",
} as const;

export const ChatSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    type: {
      $ref: "#/components/schemas/ChatType",
    },
    title: {
      type: "string",
      nullable: true,
    },
    username: {
      type: "string",
      nullable: true,
    },
    firstName: {
      type: "string",
      nullable: true,
    },
    lastName: {
      type: "string",
      nullable: true,
    },
    isForum: {
      type: "boolean",
      nullable: true,
    },
    photo: {
      $ref: "#/components/schemas/ChatPhoto",
    },
    activeUsernames: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    emojiStatusCustomEmojiId: {
      type: "string",
      nullable: true,
    },
    bio: {
      type: "string",
      nullable: true,
    },
    hasPrivateForwards: {
      type: "boolean",
      nullable: true,
    },
    hasRestrictedVoiceAndVideoMessages: {
      type: "boolean",
      nullable: true,
    },
    joinToSendMessages: {
      type: "boolean",
      nullable: true,
    },
    joinByRequest: {
      type: "boolean",
      nullable: true,
    },
    description: {
      type: "string",
      nullable: true,
    },
    inviteLink: {
      type: "string",
      nullable: true,
    },
    pinnedMessage: {
      $ref: "#/components/schemas/Message",
    },
    permissions: {
      $ref: "#/components/schemas/ChatPermissions",
    },
    slowModeDelay: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    messageAutoDeleteTime: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    hasAggressiveAntiSpamEnabled: {
      type: "boolean",
      nullable: true,
    },
    hasHiddenMembers: {
      type: "boolean",
      nullable: true,
    },
    hasProtectedContent: {
      type: "boolean",
      nullable: true,
    },
    stickerSetName: {
      type: "string",
      nullable: true,
    },
    canSetStickerSet: {
      type: "boolean",
      nullable: true,
    },
    linkedChatId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    location: {
      $ref: "#/components/schemas/ChatLocation",
    },
  },
  additionalProperties: false,
} as const;

export const ChatInviteLinkSchema = {
  type: "object",
  properties: {
    inviteLink: {
      type: "string",
      nullable: true,
    },
    creator: {
      $ref: "#/components/schemas/User",
    },
    createsJoinRequest: {
      type: "boolean",
    },
    isPrimary: {
      type: "boolean",
    },
    isRevoked: {
      type: "boolean",
    },
    name: {
      type: "string",
      nullable: true,
    },
    expireDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    memberLimit: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    pendingJoinRequestCount: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ChatJoinRequestSchema = {
  type: "object",
  properties: {
    chat: {
      $ref: "#/components/schemas/Chat",
    },
    from: {
      $ref: "#/components/schemas/User",
    },
    userChatId: {
      type: "integer",
      format: "int64",
    },
    date: {
      type: "string",
      format: "date-time",
    },
    bio: {
      type: "string",
      nullable: true,
    },
    inviteLink: {
      $ref: "#/components/schemas/ChatInviteLink",
    },
  },
  additionalProperties: false,
} as const;

export const ChatLocationSchema = {
  type: "object",
  properties: {
    location: {
      $ref: "#/components/schemas/Location",
    },
    address: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ChatMemberSchema = {
  type: "object",
  properties: {
    status: {
      $ref: "#/components/schemas/ChatMemberStatus",
    },
    user: {
      $ref: "#/components/schemas/User",
    },
  },
  additionalProperties: false,
} as const;

export const ChatMemberStatusSchema = {
  enum: [1, 2, 3, 4, 5, 6],
  type: "integer",
  format: "int32",
} as const;

export const ChatMemberUpdatedSchema = {
  type: "object",
  properties: {
    chat: {
      $ref: "#/components/schemas/Chat",
    },
    from: {
      $ref: "#/components/schemas/User",
    },
    date: {
      type: "string",
      format: "date-time",
    },
    oldChatMember: {
      $ref: "#/components/schemas/ChatMember",
    },
    newChatMember: {
      $ref: "#/components/schemas/ChatMember",
    },
    inviteLink: {
      $ref: "#/components/schemas/ChatInviteLink",
    },
    viaChatFolderInviteLink: {
      type: "boolean",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ChatPermissionsSchema = {
  type: "object",
  properties: {
    canSendMessages: {
      type: "boolean",
      nullable: true,
    },
    canSendAudios: {
      type: "boolean",
      nullable: true,
    },
    canSendDocuments: {
      type: "boolean",
      nullable: true,
    },
    canSendPhotos: {
      type: "boolean",
      nullable: true,
    },
    canSendVideos: {
      type: "boolean",
      nullable: true,
    },
    canSendVideoNotes: {
      type: "boolean",
      nullable: true,
    },
    canSendVoiceNotes: {
      type: "boolean",
      nullable: true,
    },
    canSendPolls: {
      type: "boolean",
      nullable: true,
    },
    canSendOtherMessages: {
      type: "boolean",
      nullable: true,
    },
    canAddWebPagePreviews: {
      type: "boolean",
      nullable: true,
    },
    canChangeInfo: {
      type: "boolean",
      nullable: true,
    },
    canInviteUsers: {
      type: "boolean",
      nullable: true,
    },
    canPinMessages: {
      type: "boolean",
      nullable: true,
    },
    canManageTopics: {
      type: "boolean",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ChatPhotoSchema = {
  type: "object",
  properties: {
    smallFileId: {
      type: "string",
      nullable: true,
    },
    smallFileUniqueId: {
      type: "string",
      nullable: true,
    },
    bigFileId: {
      type: "string",
      nullable: true,
    },
    bigFileUniqueId: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ChatSharedSchema = {
  type: "object",
  properties: {
    requestId: {
      type: "integer",
      format: "int32",
    },
    chatId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const ChatTypeSchema = {
  enum: [1, 2, 3, 4, 5],
  type: "integer",
  format: "int32",
} as const;

export const ChosenInlineResultSchema = {
  type: "object",
  properties: {
    resultId: {
      type: "string",
      nullable: true,
    },
    from: {
      $ref: "#/components/schemas/User",
    },
    location: {
      $ref: "#/components/schemas/Location",
    },
    inlineMessageId: {
      type: "string",
      nullable: true,
    },
    query: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ClientDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    inboundId: {
      type: "integer",
      format: "int64",
    },
    enable: {
      type: "boolean",
    },
    email: {
      type: "string",
      nullable: true,
    },
    up: {
      type: "integer",
      format: "int64",
    },
    down: {
      type: "integer",
      format: "int64",
    },
    expiryTime: {
      type: "integer",
      format: "int64",
    },
    total: {
      type: "integer",
      format: "int64",
    },
    reset: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const ClientInOrderSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      nullable: true,
    },
    link: {
      type: "string",
      nullable: true,
    },
    id: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const ContactSchema = {
  type: "object",
  properties: {
    phoneNumber: {
      type: "string",
      nullable: true,
    },
    firstName: {
      type: "string",
      nullable: true,
    },
    lastName: {
      type: "string",
      nullable: true,
    },
    userId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    vcard: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const CountryDtoSchema = {
  required: ["name"],
  type: "object",
  properties: {
    name: {
      maxLength: 20,
      minLength: 1,
      type: "string",
    },
    id: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const CountryDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CountryDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const DiceSchema = {
  type: "object",
  properties: {
    emoji: {
      type: "string",
      nullable: true,
    },
    value: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const DocumentSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    thumbnail: {
      $ref: "#/components/schemas/PhotoSize",
    },
    fileName: {
      type: "string",
      nullable: true,
    },
    mimeType: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const EncryptedCredentialsSchema = {
  type: "object",
  properties: {
    data: {
      type: "string",
      nullable: true,
    },
    hash: {
      type: "string",
      nullable: true,
    },
    secret: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const EncryptedPassportElementSchema = {
  type: "object",
  properties: {
    type: {
      $ref: "#/components/schemas/EncryptedPassportElementType",
    },
    data: {
      type: "string",
      nullable: true,
    },
    phoneNumber: {
      type: "string",
      nullable: true,
    },
    email: {
      type: "string",
      nullable: true,
    },
    files: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PassportFile",
      },
      nullable: true,
    },
    frontSide: {
      $ref: "#/components/schemas/PassportFile",
    },
    reverseSide: {
      $ref: "#/components/schemas/PassportFile",
    },
    selfie: {
      $ref: "#/components/schemas/PassportFile",
    },
    translation: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PassportFile",
      },
      nullable: true,
    },
    hash: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const EncryptedPassportElementTypeSchema = {
  enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
  type: "integer",
  format: "int32",
} as const;

export const FileSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    filePath: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const FilterAgentDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentDto",
      },
      nullable: true,
    },
    adminId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    persianBrandName: {
      type: "string",
      nullable: true,
    },
    adminAgentName: {
      type: "string",
      nullable: true,
    },
    ancestor: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const FilterAgentDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterAgentDto",
    },
  },
  additionalProperties: false,
} as const;

export const FilterAppleIdSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AppleIdDto",
      },
      nullable: true,
    },
    email: {
      type: "string",
      nullable: true,
    },
    userId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    status: {
      $ref: "#/components/schemas/AppleIdStatus",
    },
    type: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const FilterInputUserReportDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/InputUserReportDto",
      },
      nullable: true,
    },
    startDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    endDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    agentId: {
      type: "integer",
      format: "int64",
    },
    userId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const FilterInputUserReportDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterInputUserReportDto",
    },
  },
  additionalProperties: false,
} as const;

export const FilterOrderDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/OrderDto",
      },
      nullable: true,
    },
    isPaid: {
      $ref: "#/components/schemas/PaidStatus",
    },
    userId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const FilterOrderDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterOrderDto",
    },
  },
  additionalProperties: false,
} as const;

export const FilterProductDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ProductDto",
      },
      nullable: true,
    },
    categoryId: {
      type: "integer",
      format: "int64",
    },
    productName: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const FilterProductDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterProductDto",
    },
  },
  additionalProperties: false,
} as const;

export const FilterProfitReportDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentIncomeDto",
      },
      nullable: true,
    },
    startDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    endDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    agentId: {
      type: "integer",
      format: "int64",
    },
    userId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const FilterProfitReportDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterProfitReportDto",
    },
  },
  additionalProperties: false,
} as const;

export const FilterRegistryDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/RegistryDto",
      },
      nullable: true,
    },
    imei: {
      type: "string",
      nullable: true,
    },
    status: {
      $ref: "#/components/schemas/RegistryStatus",
    },
  },
  additionalProperties: false,
} as const;

export const FilterRegistryDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterRegistryDto",
    },
  },
  additionalProperties: false,
} as const;

export const FilterServerDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ServerDto",
      },
      nullable: true,
    },
    serverAddress: {
      type: "string",
      nullable: true,
    },
    serverName: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const FilterServerDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterServerDto",
    },
  },
  additionalProperties: false,
} as const;

export const FilterTransactionDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TransactionDto",
      },
      nullable: true,
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    status: {
      $ref: "#/components/schemas/TransactionStatus",
    },
    details: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    startDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    endDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    userId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const FilterTransactionDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterTransactionDto",
    },
  },
  additionalProperties: false,
} as const;

export const FilterUsersDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/UserDto",
      },
      nullable: true,
    },
    firstName: {
      type: "string",
      nullable: true,
    },
    lastName: {
      type: "string",
      nullable: true,
    },
    mobile: {
      type: "string",
      nullable: true,
    },
    agentId: {
      type: "integer",
      format: "int64",
    },
    username: {
      type: "string",
      nullable: true,
    },
    isAgent: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const FilterUsersDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterUsersDto",
    },
  },
  additionalProperties: false,
} as const;

export const FilterVpnDtoSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
    },
    pageCount: {
      type: "integer",
      format: "int32",
    },
    allEntitiesCount: {
      type: "integer",
      format: "int32",
    },
    startPage: {
      type: "integer",
      format: "int32",
    },
    endPage: {
      type: "integer",
      format: "int32",
    },
    takeEntity: {
      type: "integer",
      format: "int32",
    },
    skipEntity: {
      type: "integer",
      format: "int32",
    },
    howManyShowPageAfterAndBefore: {
      type: "integer",
      format: "int32",
    },
    showPageCountId: {
      type: "integer",
      format: "int32",
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/VpnDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const FilterVpnDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/FilterVpnDto",
    },
  },
  additionalProperties: false,
} as const;

export const ForgetUserPasswordDtoSchema = {
  required: ["mobile"],
  type: "object",
  properties: {
    mobile: {
      maxLength: 12,
      minLength: 1,
      type: "string",
    },
  },
  additionalProperties: false,
} as const;

export const ForumTopicClosedSchema = {
  type: "object",
  additionalProperties: false,
} as const;

export const ForumTopicCreatedSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      nullable: true,
    },
    iconColor: {
      type: "integer",
      format: "int32",
    },
    iconCustomEmojiId: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ForumTopicEditedSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      nullable: true,
    },
    iconCustomEmojiId: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ForumTopicReopenedSchema = {
  type: "object",
  additionalProperties: false,
} as const;

export const GameSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      nullable: true,
    },
    description: {
      type: "string",
      nullable: true,
    },
    photo: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PhotoSize",
      },
      nullable: true,
    },
    text: {
      type: "string",
      nullable: true,
    },
    textEntities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/MessageEntity",
      },
      nullable: true,
    },
    animation: {
      $ref: "#/components/schemas/Animation",
    },
  },
  additionalProperties: false,
} as const;

export const GeneralForumTopicHiddenSchema = {
  type: "object",
  additionalProperties: false,
} as const;

export const GeneralForumTopicUnhiddenSchema = {
  type: "object",
  additionalProperties: false,
} as const;

export const GetAppleIdTypeDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    title: {
      type: "string",
      nullable: true,
    },
    price: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const GetClientDtoSchema = {
  type: "object",
  properties: {
    orderDetailsId: {
      type: "integer",
      format: "int64",
    },
    serverId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const GetMarzbanServerOptionDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    serverName: {
      type: "string",
      nullable: true,
    },
    userPrice: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const GetMarzbanVpnDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    name: {
      type: "string",
      nullable: true,
    },
    gbMax: {
      type: "integer",
      format: "int64",
    },
    gbMin: {
      type: "integer",
      format: "int64",
    },
    gbPrice: {
      type: "integer",
      format: "int64",
    },
    dayMax: {
      type: "integer",
      format: "int64",
    },
    dayMin: {
      type: "integer",
      format: "int64",
    },
    dayPrice: {
      type: "integer",
      format: "int64",
    },
    marzbanServerId: {
      type: "integer",
      format: "int64",
    },
    vmess: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    vless: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    shadowsocks: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    trojan: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    test_Active: {
      type: "boolean",
    },
    test_Days: {
      type: "integer",
      format: "int64",
    },
    test_TotalGb: {
      type: "integer",
      format: "int64",
    },
    agentsIncomesDetailByPrice: {
      $ref: "#/components/schemas/AgentsIncomesDetailByPriceDto",
    },
  },
  additionalProperties: false,
} as const;

export const HierarchyIdSchema = {
  type: "object",
  additionalProperties: false,
} as const;

export const InboundDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    up: {
      type: "integer",
      format: "int64",
    },
    down: {
      type: "integer",
      format: "int64",
    },
    total: {
      type: "integer",
      format: "int64",
    },
    listen: {
      type: "string",
      nullable: true,
    },
    remark: {
      type: "string",
      nullable: true,
    },
    enable: {
      type: "boolean",
    },
    port: {
      type: "integer",
      format: "int64",
    },
    expiryTime: {
      type: "integer",
      format: "int64",
    },
    protocol: {
      type: "string",
      nullable: true,
    },
    streamSettings: {
      type: "string",
      nullable: true,
    },
    sniffing: {
      type: "string",
      nullable: true,
    },
    settings: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const InboundDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/InboundDto",
    },
  },
  additionalProperties: false,
} as const;

export const InformationPaymentDtoSchema = {
  type: "object",
  properties: {
    cardNumber: {
      type: "string",
      nullable: true,
    },
    maximumAmount: {
      type: "integer",
      format: "int32",
    },
    minimalAmount: {
      type: "integer",
      format: "int32",
    },
    cardHolderName: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const InformationPaymentDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/InformationPaymentDto",
    },
  },
  additionalProperties: false,
} as const;

export const InlineKeyboardButtonSchema = {
  type: "object",
  properties: {
    text: {
      type: "string",
      nullable: true,
    },
    url: {
      type: "string",
      nullable: true,
    },
    callbackData: {
      type: "string",
      nullable: true,
    },
    webApp: {
      $ref: "#/components/schemas/WebAppInfo",
    },
    loginUrl: {
      $ref: "#/components/schemas/LoginUrl",
    },
    switchInlineQuery: {
      type: "string",
      nullable: true,
    },
    switchInlineQueryCurrentChat: {
      type: "string",
      nullable: true,
    },
    switchInlineQueryChosenChat: {
      $ref: "#/components/schemas/SwitchInlineQueryChosenChat",
    },
    callbackGame: {
      $ref: "#/components/schemas/CallbackGame",
    },
    pay: {
      type: "boolean",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const InlineKeyboardMarkupSchema = {
  type: "object",
  properties: {
    inlineKeyboard: {
      type: "array",
      items: {
        type: "array",
        items: {
          $ref: "#/components/schemas/InlineKeyboardButton",
        },
      },
      nullable: true,
      readOnly: true,
    },
  },
  additionalProperties: false,
} as const;

export const InlineQuerySchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: true,
    },
    from: {
      $ref: "#/components/schemas/User",
    },
    query: {
      type: "string",
      nullable: true,
    },
    offset: {
      type: "string",
      nullable: true,
    },
    chatType: {
      $ref: "#/components/schemas/ChatType",
    },
    location: {
      $ref: "#/components/schemas/Location",
    },
  },
  additionalProperties: false,
} as const;

export const InputUserReportDtoSchema = {
  type: "object",
  properties: {
    count: {
      type: "integer",
      format: "int32",
    },
    date: {
      type: "string",
      format: "date-time",
    },
  },
  additionalProperties: false,
} as const;

export const InvoiceSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      nullable: true,
    },
    description: {
      type: "string",
      nullable: true,
    },
    startParameter: {
      type: "string",
      nullable: true,
    },
    currency: {
      type: "string",
      nullable: true,
    },
    totalAmount: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const LocationSchema = {
  type: "object",
  properties: {
    longitude: {
      type: "number",
      format: "double",
    },
    latitude: {
      type: "number",
      format: "double",
    },
    horizontalAccuracy: {
      type: "number",
      format: "float",
      nullable: true,
    },
    livePeriod: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    heading: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    proximityAlertRadius: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const LoginUrlSchema = {
  type: "object",
  properties: {
    url: {
      type: "string",
      nullable: true,
    },
    forwardText: {
      type: "string",
      nullable: true,
    },
    botUsername: {
      type: "string",
      nullable: true,
    },
    requestWriteAccess: {
      type: "boolean",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const LoginUserDtoSchema = {
  required: ["password"],
  type: "object",
  properties: {
    email: {
      type: "string",
      nullable: true,
    },
    chatId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    password: {
      maxLength: 30,
      minLength: 1,
      type: "string",
    },
  },
  additionalProperties: false,
} as const;

export const LoginUserResponseDtoSchema = {
  type: "object",
  properties: {
    token: {
      type: "string",
      nullable: true,
    },
    userName: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const LoginUserResponseDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/LoginUserResponseDto",
    },
  },
  additionalProperties: false,
} as const;

export const MarzbanInboundsDtoSchema = {
  type: "object",
  properties: {
    vmess: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Vmess",
      },
      nullable: true,
    },
    vless: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Vless",
      },
      nullable: true,
    },
    trojan: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Trojan",
      },
      nullable: true,
    },
    shadowsocks: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Shadowsocks",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const MarzbanNodeDtoSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      nullable: true,
    },
    address: {
      type: "string",
      nullable: true,
    },
    port: {
      type: "integer",
      format: "int32",
    },
    api_Port: {
      type: "integer",
      format: "int32",
    },
    usage_Coefficient: {
      type: "number",
      format: "double",
    },
    id: {
      type: "integer",
      format: "int64",
    },
    xray_Version: {
      type: "string",
      nullable: true,
    },
    status: {
      $ref: "#/components/schemas/NodeStatus",
    },
    message: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const MarzbanNodeSettingDtoSchema = {
  type: "object",
  properties: {
    min_Node_Version: {
      type: "string",
      nullable: true,
    },
    certificate: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const MarzbanUserDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    expire: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    data_Limit: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    data_Limit_Reset_Strategy: {
      type: "string",
      nullable: true,
    },
    note: {
      type: "string",
      nullable: true,
    },
    sub_Updated_At: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    sub_Last_User_Agent: {
      type: "string",
      nullable: true,
    },
    online_At: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    on_Hold_Expire_Duration: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    onHoldTimeout: {
      type: "string",
      nullable: true,
    },
    username: {
      type: "string",
      nullable: true,
    },
    status: {
      type: "string",
      nullable: true,
    },
    used_Traffic: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    lifetime_Used_Traffic: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    created_At: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    links: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    subscription_Url: {
      type: "string",
      nullable: true,
    },
    proxies: {
      nullable: true,
    },
    inbounds: {
      nullable: true,
    },
    isDelete: {
      type: "boolean",
    },
    marzbanVpnId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    marzbanServerId: {
      type: "integer",
      format: "int64",
    },
    userId: {
      type: "integer",
      format: "int64",
    },
    addedHolderInbound: {
      type: "boolean",
    },
    marzbanVpnName: {
      type: "string",
      nullable: true,
    },
    orderDeatilId: {
      type: "integer",
      format: "int64",
    },
    chatId: {
      type: "integer",
      format: "int64",
    },
    telegramUsername: {
      type: "string",
      nullable: true,
    },
    serviceTime: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    volume: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    orderId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const MarzbanUserInformationDtoSchema = {
  type: "object",
  properties: {
    links: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
    subscription_Url: {
      type: "string",
      nullable: true,
    },
    username: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const MarzbanVpnTemplateDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    title: {
      type: "string",
      nullable: true,
    },
    price: {
      type: "integer",
      format: "int64",
    },
    days: {
      type: "integer",
      format: "int32",
    },
    gb: {
      type: "integer",
      format: "int32",
    },
    marzbanVpnId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const MaskPositionSchema = {
  type: "object",
  properties: {
    point: {
      $ref: "#/components/schemas/MaskPositionPoint",
    },
    xShift: {
      type: "number",
      format: "float",
    },
    yShift: {
      type: "number",
      format: "float",
    },
    scale: {
      type: "number",
      format: "float",
    },
  },
  additionalProperties: false,
} as const;

export const MaskPositionPointSchema = {
  enum: [1, 2, 3, 4],
  type: "integer",
  format: "int32",
} as const;

export const MessageSchema = {
  type: "object",
  properties: {
    messageId: {
      type: "integer",
      format: "int32",
    },
    messageThreadId: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    from: {
      $ref: "#/components/schemas/User",
    },
    senderChat: {
      $ref: "#/components/schemas/Chat",
    },
    date: {
      type: "string",
      format: "date-time",
    },
    chat: {
      $ref: "#/components/schemas/Chat",
    },
    forwardFrom: {
      $ref: "#/components/schemas/User",
    },
    isTopicMessage: {
      type: "boolean",
      nullable: true,
    },
    forwardFromChat: {
      $ref: "#/components/schemas/Chat",
    },
    forwardFromMessageId: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    forwardSignature: {
      type: "string",
      nullable: true,
    },
    forwardSenderName: {
      type: "string",
      nullable: true,
    },
    forwardDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    isAutomaticForward: {
      type: "boolean",
      nullable: true,
    },
    replyToMessage: {
      $ref: "#/components/schemas/Message",
    },
    viaBot: {
      $ref: "#/components/schemas/User",
    },
    editDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    hasProtectedContent: {
      type: "boolean",
      nullable: true,
    },
    mediaGroupId: {
      type: "string",
      nullable: true,
    },
    authorSignature: {
      type: "string",
      nullable: true,
    },
    text: {
      type: "string",
      nullable: true,
    },
    entities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/MessageEntity",
      },
      nullable: true,
    },
    entityValues: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
      readOnly: true,
    },
    animation: {
      $ref: "#/components/schemas/Animation",
    },
    audio: {
      $ref: "#/components/schemas/Audio",
    },
    document: {
      $ref: "#/components/schemas/Document",
    },
    photo: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PhotoSize",
      },
      nullable: true,
    },
    sticker: {
      $ref: "#/components/schemas/Sticker",
    },
    video: {
      $ref: "#/components/schemas/Video",
    },
    videoNote: {
      $ref: "#/components/schemas/VideoNote",
    },
    voice: {
      $ref: "#/components/schemas/Voice",
    },
    caption: {
      type: "string",
      nullable: true,
    },
    captionEntities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/MessageEntity",
      },
      nullable: true,
    },
    captionEntityValues: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
      readOnly: true,
    },
    hasMediaSpoiler: {
      type: "boolean",
      nullable: true,
    },
    contact: {
      $ref: "#/components/schemas/Contact",
    },
    dice: {
      $ref: "#/components/schemas/Dice",
    },
    game: {
      $ref: "#/components/schemas/Game",
    },
    poll: {
      $ref: "#/components/schemas/Poll",
    },
    venue: {
      $ref: "#/components/schemas/Venue",
    },
    location: {
      $ref: "#/components/schemas/Location",
    },
    newChatMembers: {
      type: "array",
      items: {
        $ref: "#/components/schemas/User",
      },
      nullable: true,
    },
    leftChatMember: {
      $ref: "#/components/schemas/User",
    },
    newChatTitle: {
      type: "string",
      nullable: true,
    },
    newChatPhoto: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PhotoSize",
      },
      nullable: true,
    },
    deleteChatPhoto: {
      type: "boolean",
      nullable: true,
    },
    groupChatCreated: {
      type: "boolean",
      nullable: true,
    },
    supergroupChatCreated: {
      type: "boolean",
      nullable: true,
    },
    channelChatCreated: {
      type: "boolean",
      nullable: true,
    },
    messageAutoDeleteTimerChanged: {
      $ref: "#/components/schemas/MessageAutoDeleteTimerChanged",
    },
    migrateToChatId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    migrateFromChatId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    pinnedMessage: {
      $ref: "#/components/schemas/Message",
    },
    invoice: {
      $ref: "#/components/schemas/Invoice",
    },
    successfulPayment: {
      $ref: "#/components/schemas/SuccessfulPayment",
    },
    userShared: {
      $ref: "#/components/schemas/UserShared",
    },
    chatShared: {
      $ref: "#/components/schemas/ChatShared",
    },
    connectedWebsite: {
      type: "string",
      nullable: true,
    },
    writeAccessAllowed: {
      $ref: "#/components/schemas/WriteAccessAllowed",
    },
    passportData: {
      $ref: "#/components/schemas/PassportData",
    },
    proximityAlertTriggered: {
      $ref: "#/components/schemas/ProximityAlertTriggered",
    },
    forumTopicCreated: {
      $ref: "#/components/schemas/ForumTopicCreated",
    },
    forumTopicEdited: {
      $ref: "#/components/schemas/ForumTopicEdited",
    },
    forumTopicClosed: {
      $ref: "#/components/schemas/ForumTopicClosed",
    },
    forumTopicReopened: {
      $ref: "#/components/schemas/ForumTopicReopened",
    },
    generalForumTopicHidden: {
      $ref: "#/components/schemas/GeneralForumTopicHidden",
    },
    generalForumTopicUnhidden: {
      $ref: "#/components/schemas/GeneralForumTopicUnhidden",
    },
    videoChatScheduled: {
      $ref: "#/components/schemas/VideoChatScheduled",
    },
    videoChatStarted: {
      $ref: "#/components/schemas/VideoChatStarted",
    },
    videoChatEnded: {
      $ref: "#/components/schemas/VideoChatEnded",
    },
    videoChatParticipantsInvited: {
      $ref: "#/components/schemas/VideoChatParticipantsInvited",
    },
    webAppData: {
      $ref: "#/components/schemas/WebAppData",
    },
    replyMarkup: {
      $ref: "#/components/schemas/InlineKeyboardMarkup",
    },
    type: {
      $ref: "#/components/schemas/MessageType",
    },
  },
  additionalProperties: false,
} as const;

export const MessageAutoDeleteTimerChangedSchema = {
  type: "object",
  properties: {
    messageAutoDeleteTime: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const MessageEntitySchema = {
  type: "object",
  properties: {
    type: {
      $ref: "#/components/schemas/MessageEntityType",
    },
    offset: {
      type: "integer",
      format: "int32",
    },
    length: {
      type: "integer",
      format: "int32",
    },
    url: {
      type: "string",
      nullable: true,
    },
    user: {
      $ref: "#/components/schemas/User",
    },
    language: {
      type: "string",
      nullable: true,
    },
    customEmojiId: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const MessageEntityTypeSchema = {
  enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
  type: "integer",
  format: "int32",
} as const;

export const MessageTypeSchema = {
  enum: [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45,
  ],
  type: "integer",
  format: "int32",
} as const;

export const NodeStatusSchema = {
  enum: [0, 1, 2, 3],
  type: "integer",
  format: "int32",
} as const;

export const NotificationDtoSchema = {
  type: "object",
  properties: {
    expire: {
      type: "string",
      format: "date-time",
    },
    notificationType: {
      $ref: "#/components/schemas/NotificationType",
    },
    message: {
      type: "string",
      nullable: true,
    },
    botId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    chatId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    id: {
      type: "integer",
      format: "int64",
    },
    fileAddress: {
      type: "string",
      nullable: true,
    },
    buttons: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ButtonJsonDto",
      },
      nullable: true,
    },
    fileCaption: {
      type: "string",
      nullable: true,
    },
    forward: {
      type: "boolean",
    },
    forwardChatId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    messageId: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const NotificationTypeSchema = {
  enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
  type: "integer",
  format: "int32",
} as const;

export const NullableSchema = {
  type: "object",
  additionalProperties: false,
} as const;

export const OrderDeatilTypeSchema = {
  enum: [1, 2],
  type: "integer",
  format: "int32",
} as const;

export const OrderDetailDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    count: {
      type: "integer",
      format: "int32",
    },
    productPrice: {
      type: "integer",
      format: "int64",
    },
    productName: {
      type: "string",
      nullable: true,
    },
    product: {
      $ref: "#/components/schemas/ProductDto",
    },
    clients: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ClientInOrder",
      },
      nullable: true,
    },
    marzbanUsers: {
      type: "array",
      items: {
        $ref: "#/components/schemas/MarzbanUserDto",
      },
      nullable: true,
    },
    orderDeatilType: {
      $ref: "#/components/schemas/OrderDeatilType",
    },
  },
  additionalProperties: false,
} as const;

export const OrderDtoSchema = {
  type: "object",
  properties: {
    userId: {
      type: "integer",
      format: "int64",
    },
    userName: {
      type: "string",
      nullable: true,
    },
    mobile: {
      type: "string",
      nullable: true,
    },
    paymentDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    isPaid: {
      type: "boolean",
    },
    tracingCode: {
      maxLength: 300,
      type: "integer",
      format: "int64",
    },
    description: {
      type: "string",
      nullable: true,
    },
    orderDetail: {
      type: "array",
      items: {
        $ref: "#/components/schemas/OrderDetailDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const OrderInfoSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      nullable: true,
    },
    phoneNumber: {
      type: "string",
      nullable: true,
    },
    email: {
      type: "string",
      nullable: true,
    },
    shippingAddress: {
      $ref: "#/components/schemas/ShippingAddress",
    },
  },
  additionalProperties: false,
} as const;

export const PaidStatusSchema = {
  enum: [0, 1, 2],
  type: "integer",
  format: "int32",
} as const;

export const PassportDataSchema = {
  type: "object",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/EncryptedPassportElement",
      },
      nullable: true,
    },
    credentials: {
      $ref: "#/components/schemas/EncryptedCredentials",
    },
  },
  additionalProperties: false,
} as const;

export const PassportFileSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    fileDate: {
      type: "string",
      format: "date-time",
    },
  },
  additionalProperties: false,
} as const;

export const PermissionSchema = {
  type: "object",
  properties: {
    permissionId: {
      type: "integer",
      format: "int64",
    },
    permissionName: {
      type: "string",
      nullable: true,
    },
    title: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const PermissionAssignmentDtoSchema = {
  type: "object",
  properties: {
    permissionId: {
      type: "integer",
      format: "int64",
    },
    isAssigned: {
      type: "boolean",
    },
  },
  additionalProperties: false,
} as const;

export const PermissionDtoSchema = {
  type: "object",
  properties: {
    permissionId: {
      type: "integer",
      format: "int64",
    },
    permissionName: {
      type: "string",
      nullable: true,
    },
    isAssigned: {
      type: "boolean",
    },
    title: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const PermissionDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PermissionDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const PhotoSizeSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    width: {
      type: "integer",
      format: "int32",
    },
    height: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const PollSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: true,
    },
    question: {
      type: "string",
      nullable: true,
    },
    options: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PollOption",
      },
      nullable: true,
    },
    totalVoterCount: {
      type: "integer",
      format: "int32",
    },
    isClosed: {
      type: "boolean",
    },
    isAnonymous: {
      type: "boolean",
    },
    type: {
      type: "string",
      nullable: true,
    },
    allowsMultipleAnswers: {
      type: "boolean",
    },
    correctOptionId: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    explanation: {
      type: "string",
      nullable: true,
    },
    explanationEntities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/MessageEntity",
      },
      nullable: true,
    },
    openPeriod: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    closeDate: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const PollAnswerSchema = {
  type: "object",
  properties: {
    pollId: {
      type: "string",
      nullable: true,
    },
    user: {
      $ref: "#/components/schemas/User",
    },
    optionIds: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const PollOptionSchema = {
  type: "object",
  properties: {
    text: {
      type: "string",
      nullable: true,
    },
    voterCount: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const PreCheckoutQuerySchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: true,
    },
    from: {
      $ref: "#/components/schemas/User",
    },
    currency: {
      type: "string",
      nullable: true,
    },
    totalAmount: {
      type: "integer",
      format: "int32",
    },
    invoicePayload: {
      type: "string",
      nullable: true,
    },
    shippingOptionId: {
      type: "string",
      nullable: true,
    },
    orderInfo: {
      $ref: "#/components/schemas/OrderInfo",
    },
  },
  additionalProperties: false,
} as const;

export const ProblemDetailsSchema = {
  type: "object",
  properties: {
    type: {
      type: "string",
      nullable: true,
    },
    title: {
      type: "string",
      nullable: true,
    },
    status: {
      type: "integer",
      format: "int32",
      nullable: true,
    },
    detail: {
      type: "string",
      nullable: true,
    },
    instance: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: {},
} as const;

export const ProductSchema = {
  required: ["price", "productName"],
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    createDate: {
      type: "string",
      format: "date-time",
    },
    modifiedDate: {
      type: "string",
      format: "date-time",
    },
    createBy: {
      type: "integer",
      format: "int64",
    },
    modifyBy: {
      type: "integer",
      format: "int64",
    },
    isDelete: {
      type: "boolean",
    },
    productName: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    price: {
      type: "integer",
      format: "int64",
    },
    categoryId: {
      type: "integer",
      format: "int64",
    },
    description: {
      maxLength: 1000,
      type: "string",
      nullable: true,
    },
    productImage: {
      type: "string",
      nullable: true,
    },
    vpnId: {
      type: "integer",
      format: "int64",
    },
    appleIdTypes: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AppleIdType",
      },
      nullable: true,
    },
    category: {
      $ref: "#/components/schemas/Category",
    },
  },
  additionalProperties: false,
} as const;

export const ProductDtoSchema = {
  required: ["price", "productName"],
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    productName: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    price: {
      type: "integer",
      format: "int64",
    },
    categoryId: {
      type: "integer",
      format: "int64",
    },
    description: {
      maxLength: 1000,
      type: "string",
      nullable: true,
    },
    productImage: {
      type: "string",
      nullable: true,
    },
    categoryType: {
      $ref: "#/components/schemas/CategoryType",
    },
  },
  additionalProperties: false,
} as const;

export const ProductTypeSchema = {
  enum: [2],
  type: "integer",
  format: "int32",
} as const;

export const ProtocolsSchema = {
  enum: [0, 1, 2, 3],
  type: "integer",
  format: "int32",
} as const;

export const ProximityAlertTriggeredSchema = {
  type: "object",
  properties: {
    traveler: {
      $ref: "#/components/schemas/User",
    },
    watcher: {
      $ref: "#/components/schemas/User",
    },
    distance: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const RegisterUserDtoSchema = {
  required: ["email", "firstName", "lastName"],
  type: "object",
  properties: {
    email: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    firstName: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    lastName: {
      maxLength: 200,
      minLength: 1,
      type: "string",
    },
    password: {
      type: "string",
      nullable: true,
    },
    confirmPassword: {
      type: "string",
      nullable: true,
    },
    agentCode: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    description: {
      maxLength: 3000,
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const RegistryAmountModelDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    model: {
      maxLength: 50,
      type: "string",
      nullable: true,
    },
    price: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const RegistryDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    imeI_1: {
      type: "string",
      nullable: true,
    },
    imeI_2: {
      type: "string",
      nullable: true,
    },
    summery: {
      type: "string",
      nullable: true,
    },
    forWho: {
      type: "string",
      nullable: true,
    },
    status: {
      $ref: "#/components/schemas/RegistryStatus",
    },
    createDate: {
      type: "string",
      format: "date-time",
    },
    modifiedDate: {
      type: "string",
      format: "date-time",
    },
    createBy: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    phone: {
      type: "string",
      nullable: true,
    },
    model: {
      type: "string",
      nullable: true,
    },
    price: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const RegistryStatusSchema = {
  enum: [0, 1, 2, 3],
  type: "integer",
  format: "int32",
} as const;

export const RoleAssignmentDtoSchema = {
  type: "object",
  properties: {
    roleId: {
      type: "integer",
      format: "int64",
    },
    isAssigned: {
      type: "boolean",
    },
  },
  additionalProperties: false,
} as const;

export const RoleDtoSchema = {
  type: "object",
  properties: {
    roleId: {
      type: "integer",
      format: "int64",
    },
    roleName: {
      type: "string",
      nullable: true,
    },
    isAssigned: {
      type: "boolean",
    },
  },
  additionalProperties: false,
} as const;

export const RoleDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/RoleDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const RolePermissionUpdateDtoSchema = {
  type: "object",
  properties: {
    roleId: {
      type: "integer",
      format: "int64",
    },
    permissions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PermissionAssignmentDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const SanaeiInboundDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    up: {
      type: "integer",
      format: "int64",
    },
    down: {
      type: "integer",
      format: "int64",
    },
    total: {
      type: "integer",
      format: "int64",
    },
    remark: {
      type: "string",
      nullable: true,
    },
    enable: {
      type: "boolean",
    },
    expiryTime: {
      type: "integer",
      format: "int64",
    },
    clientStats: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ClientDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const SanaeiInboundDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SanaeiInboundDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ServerDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    serverName: {
      type: "string",
      nullable: true,
    },
    serverAddress: {
      type: "string",
      nullable: true,
    },
    userName: {
      type: "string",
      nullable: true,
    },
    port: {
      type: "string",
      nullable: true,
    },
    password: {
      type: "string",
      nullable: true,
    },
    countryId: {
      type: "integer",
      format: "int64",
    },
    subPath: {
      type: "string",
      nullable: true,
    },
    subDomain: {
      type: "string",
      nullable: true,
    },
    subPort: {
      type: "string",
      nullable: true,
    },
    serverStatus: {
      $ref: "#/components/schemas/ServerStatus",
    },
  },
  additionalProperties: false,
} as const;

export const ServerDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ServerDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ServerStatusSchema = {
  enum: [1, 2],
  type: "integer",
  format: "int32",
} as const;

export const ShadowsocksSchema = {
  type: "object",
  properties: {
    tag: {
      type: "string",
      nullable: true,
    },
    protocol: {
      $ref: "#/components/schemas/Protocols",
    },
    network: {
      type: "string",
      nullable: true,
    },
    tls: {
      type: "string",
      nullable: true,
    },
    port: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ShippingAddressSchema = {
  type: "object",
  properties: {
    countryCode: {
      type: "string",
      nullable: true,
    },
    state: {
      type: "string",
      nullable: true,
    },
    city: {
      type: "string",
      nullable: true,
    },
    streetLine1: {
      type: "string",
      nullable: true,
    },
    streetLine2: {
      type: "string",
      nullable: true,
    },
    postCode: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ShippingQuerySchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: true,
    },
    from: {
      $ref: "#/components/schemas/User",
    },
    invoicePayload: {
      type: "string",
      nullable: true,
    },
    shippingAddress: {
      $ref: "#/components/schemas/ShippingAddress",
    },
  },
  additionalProperties: false,
} as const;

export const StickerSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    type: {
      $ref: "#/components/schemas/StickerType",
    },
    width: {
      type: "integer",
      format: "int32",
    },
    height: {
      type: "integer",
      format: "int32",
    },
    isAnimated: {
      type: "boolean",
    },
    isVideo: {
      type: "boolean",
    },
    thumbnail: {
      $ref: "#/components/schemas/PhotoSize",
    },
    emoji: {
      type: "string",
      nullable: true,
    },
    setName: {
      type: "string",
      nullable: true,
    },
    premiumAnimation: {
      $ref: "#/components/schemas/File",
    },
    maskPosition: {
      $ref: "#/components/schemas/MaskPosition",
    },
    customEmojiId: {
      type: "string",
      nullable: true,
    },
    needsRepainting: {
      type: "boolean",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const StickerTypeSchema = {
  enum: [1, 2, 3],
  type: "integer",
  format: "int32",
} as const;

export const SuccessfulPaymentSchema = {
  type: "object",
  properties: {
    currency: {
      type: "string",
      nullable: true,
    },
    totalAmount: {
      type: "integer",
      format: "int32",
    },
    invoicePayload: {
      type: "string",
      nullable: true,
    },
    shippingOptionId: {
      type: "string",
      nullable: true,
    },
    orderInfo: {
      $ref: "#/components/schemas/OrderInfo",
    },
    telegramPaymentChargeId: {
      type: "string",
      nullable: true,
    },
    providerPaymentChargeId: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const SwitchInlineQueryChosenChatSchema = {
  type: "object",
  properties: {
    query: {
      type: "string",
      nullable: true,
    },
    allowUserChats: {
      type: "boolean",
      nullable: true,
    },
    allowBotChats: {
      type: "boolean",
      nullable: true,
    },
    allowGroupChats: {
      type: "boolean",
      nullable: true,
    },
    allowChannelChats: {
      type: "boolean",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const TransactionDetailDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    maximumAmountForAgent: {
      type: "integer",
      format: "int64",
    },
    minimalAmountForAgent: {
      type: "integer",
      format: "int64",
    },
    maximumAmountForUser: {
      type: "integer",
      format: "int64",
    },
    minimalAmountForUser: {
      type: "integer",
      format: "int64",
    },
    cardNumber: {
      type: "string",
      nullable: true,
    },
    cardHolderName: {
      type: "string",
      nullable: true,
    },
    description: {
      type: "string",
      nullable: true,
    },
    agentId: {
      type: "integer",
      format: "int64",
    },
    userPercent: {
      type: "integer",
      format: "int64",
    },
    agentPercent: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const TransactionDetailDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/TransactionDetailDto",
    },
  },
  additionalProperties: false,
} as const;

export const TransactionDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    title: {
      type: "string",
      nullable: true,
    },
    price: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    description: {
      type: "string",
      nullable: true,
    },
    transactionType: {
      $ref: "#/components/schemas/TransactionType",
    },
    transactionStatus: {
      $ref: "#/components/schemas/TransactionStatus",
    },
    accountName: {
      type: "string",
      nullable: true,
    },
    transactionTime: {
      type: "string",
      format: "date-time",
    },
    cardNumber: {
      type: "string",
      nullable: true,
    },
    bankName: {
      type: "string",
      nullable: true,
    },
    avatarTransaction: {
      type: "string",
      nullable: true,
    },
    transactionCode: {
      type: "integer",
      format: "int64",
    },
    createBy: {
      type: "integer",
      format: "int64",
    },
    username: {
      type: "string",
      nullable: true,
    },
    chatId: {
      type: "integer",
      format: "int64",
    },
    transactionDetailId: {
      type: "integer",
      format: "int64",
    },
    balance: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    firstName: {
      type: "string",
      nullable: true,
    },
    lastName: {
      type: "string",
      nullable: true,
    },
    userId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const TransactionDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/TransactionDto",
    },
  },
  additionalProperties: false,
} as const;

export const TransactionStatusSchema = {
  enum: [1, 2, 3],
  type: "integer",
  format: "int32",
} as const;

export const TransactionTypeSchema = {
  enum: [0, 1, 2, 3],
  type: "integer",
  format: "int32",
} as const;

export const TrojanSchema = {
  type: "object",
  properties: {
    tag: {
      type: "string",
      nullable: true,
    },
    protocol: {
      $ref: "#/components/schemas/Protocols",
    },
    network: {
      type: "string",
      nullable: true,
    },
    tls: {
      type: "string",
      nullable: true,
    },
    port: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UpdateSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int32",
    },
    message: {
      $ref: "#/components/schemas/Message",
    },
    editedMessage: {
      $ref: "#/components/schemas/Message",
    },
    channelPost: {
      $ref: "#/components/schemas/Message",
    },
    editedChannelPost: {
      $ref: "#/components/schemas/Message",
    },
    inlineQuery: {
      $ref: "#/components/schemas/InlineQuery",
    },
    chosenInlineResult: {
      $ref: "#/components/schemas/ChosenInlineResult",
    },
    callbackQuery: {
      $ref: "#/components/schemas/CallbackQuery",
    },
    shippingQuery: {
      $ref: "#/components/schemas/ShippingQuery",
    },
    preCheckoutQuery: {
      $ref: "#/components/schemas/PreCheckoutQuery",
    },
    poll: {
      $ref: "#/components/schemas/Poll",
    },
    pollAnswer: {
      $ref: "#/components/schemas/PollAnswer",
    },
    myChatMember: {
      $ref: "#/components/schemas/ChatMemberUpdated",
    },
    chatMember: {
      $ref: "#/components/schemas/ChatMemberUpdated",
    },
    chatJoinRequest: {
      $ref: "#/components/schemas/ChatJoinRequest",
    },
    type: {
      $ref: "#/components/schemas/UpdateType",
    },
  },
  additionalProperties: false,
} as const;

export const UpdateAgentRequestDtoSchema = {
  type: "object",
  properties: {
    agentRequestStatus: {
      type: "string",
      nullable: true,
    },
    id: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const UpdateInboundDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    listen: {
      type: "string",
      nullable: true,
    },
    remark: {
      type: "string",
      nullable: true,
    },
    enable: {
      type: "boolean",
    },
    port: {
      type: "integer",
      format: "int64",
    },
    expiryTime: {
      type: "integer",
      format: "int64",
    },
    protocol: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UpdateTransactionStatusDtoSchema = {
  type: "object",
  properties: {
    transactionStatus: {
      $ref: "#/components/schemas/TransactionStatus",
    },
    transactionId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const UpdateTypeSchema = {
  enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
  type: "integer",
  format: "int32",
} as const;

export const UpdateUserDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    isBlocked: {
      type: "boolean",
    },
    cardToCardPayment: {
      type: "boolean",
    },
    description: {
      maxLength: 3000,
      type: "string",
      nullable: true,
    },
    specialPercent: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const UserSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    isBot: {
      type: "boolean",
    },
    firstName: {
      type: "string",
      nullable: true,
    },
    lastName: {
      type: "string",
      nullable: true,
    },
    username: {
      type: "string",
      nullable: true,
    },
    languageCode: {
      type: "string",
      nullable: true,
    },
    isPremium: {
      type: "boolean",
      nullable: true,
    },
    addedToAttachmentMenu: {
      type: "boolean",
      nullable: true,
    },
    canJoinGroups: {
      type: "boolean",
      nullable: true,
    },
    canReadAllGroupMessages: {
      type: "boolean",
      nullable: true,
    },
    supportsInlineQueries: {
      type: "boolean",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UserDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    email: {
      maxLength: 200,
      type: "string",
      format: "email",
      nullable: true,
    },
    mobile: {
      maxLength: 12,
      minLength: 11,
      type: "string",
      nullable: true,
    },
    mobileActiveCode: {
      type: "string",
      nullable: true,
    },
    isMobileActive: {
      type: "boolean",
    },
    firstName: {
      maxLength: 200,
      type: "string",
      nullable: true,
    },
    lastName: {
      maxLength: 200,
      type: "string",
      nullable: true,
    },
    avatar: {
      maxLength: 200,
      type: "string",
      nullable: true,
    },
    address: {
      maxLength: 500,
      type: "string",
      nullable: true,
    },
    agentId: {
      type: "integer",
      format: "int64",
    },
    modifiedDate: {
      type: "string",
      format: "date-time",
    },
    balance: {
      type: "integer",
      format: "int64",
    },
    chatId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    telegramUsername: {
      type: "string",
      nullable: true,
    },
    userStatus: {
      type: "boolean",
    },
    isBlocked: {
      type: "boolean",
    },
    cardToCardPayment: {
      type: "boolean",
    },
    createDate: {
      type: "string",
      format: "date-time",
    },
    isAgent: {
      type: "boolean",
    },
    agency: {
      $ref: "#/components/schemas/AgentDto",
    },
    description: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UserDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/UserDto",
    },
  },
  additionalProperties: false,
} as const;

export const UserDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/UserDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UserInformationDtoSchema = {
  type: "object",
  properties: {
    firstName: {
      type: "string",
      nullable: true,
    },
    lastName: {
      type: "string",
      nullable: true,
    },
    telegramUsername: {
      type: "string",
      nullable: true,
    },
    isAgent: {
      type: "boolean",
    },
    chatId: {
      type: "integer",
      format: "int64",
    },
    id: {
      type: "integer",
      format: "int64",
    },
    agency: {
      $ref: "#/components/schemas/AgentDto",
    },
    botName: {
      type: "string",
      nullable: true,
    },
    botLink: {
      type: "string",
      nullable: true,
    },
    balance: {
      type: "integer",
      format: "int64",
    },
    avatar: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UserInformationDtoApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      $ref: "#/components/schemas/UserInformationDto",
    },
  },
  additionalProperties: false,
} as const;

export const UserRolePermissionsDtoSchema = {
  type: "object",
  properties: {
    roleId: {
      type: "integer",
      format: "int64",
    },
    roleName: {
      type: "string",
      nullable: true,
    },
    permissions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Permission",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UserRolePermissionsDtoListApiResultSchema = {
  type: "object",
  properties: {
    isSuccess: {
      type: "boolean",
    },
    statusCode: {
      $ref: "#/components/schemas/ApiResultStatusCode",
    },
    message: {
      type: "string",
      nullable: true,
    },
    jsonValidationMessage: {
      type: "string",
      nullable: true,
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/UserRolePermissionsDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UserRoleUpdateDtoSchema = {
  type: "object",
  properties: {
    userId: {
      type: "integer",
      format: "int64",
    },
    roles: {
      type: "array",
      items: {
        $ref: "#/components/schemas/RoleAssignmentDto",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UserSharedSchema = {
  type: "object",
  properties: {
    requestId: {
      type: "integer",
      format: "int32",
    },
    userId: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const VenueSchema = {
  type: "object",
  properties: {
    location: {
      $ref: "#/components/schemas/Location",
    },
    title: {
      type: "string",
      nullable: true,
    },
    address: {
      type: "string",
      nullable: true,
    },
    foursquareId: {
      type: "string",
      nullable: true,
    },
    foursquareType: {
      type: "string",
      nullable: true,
    },
    googlePlaceId: {
      type: "string",
      nullable: true,
    },
    googlePlaceType: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const VideoSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    width: {
      type: "integer",
      format: "int32",
    },
    height: {
      type: "integer",
      format: "int32",
    },
    duration: {
      type: "integer",
      format: "int32",
    },
    thumbnail: {
      $ref: "#/components/schemas/PhotoSize",
    },
    fileName: {
      type: "string",
      nullable: true,
    },
    mimeType: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const VideoChatEndedSchema = {
  type: "object",
  properties: {
    duration: {
      type: "integer",
      format: "int32",
    },
  },
  additionalProperties: false,
} as const;

export const VideoChatParticipantsInvitedSchema = {
  type: "object",
  properties: {
    users: {
      type: "array",
      items: {
        $ref: "#/components/schemas/User",
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const VideoChatScheduledSchema = {
  type: "object",
  properties: {
    startDate: {
      type: "string",
      format: "date-time",
    },
  },
  additionalProperties: false,
} as const;

export const VideoChatStartedSchema = {
  type: "object",
  additionalProperties: false,
} as const;

export const VideoNoteSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    length: {
      type: "integer",
      format: "int32",
    },
    duration: {
      type: "integer",
      format: "int32",
    },
    thumbnail: {
      $ref: "#/components/schemas/PhotoSize",
    },
  },
  additionalProperties: false,
} as const;

export const VlessSchema = {
  type: "object",
  properties: {
    tag: {
      type: "string",
      nullable: true,
    },
    protocol: {
      $ref: "#/components/schemas/Protocols",
    },
    network: {
      type: "string",
      nullable: true,
    },
    tls: {
      type: "string",
      nullable: true,
    },
    port: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const VmessSchema = {
  type: "object",
  properties: {
    tag: {
      type: "string",
      nullable: true,
    },
    protocol: {
      $ref: "#/components/schemas/Protocols",
    },
    network: {
      type: "string",
      nullable: true,
    },
    tls: {
      type: "string",
      nullable: true,
    },
    port: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const VoiceSchema = {
  type: "object",
  properties: {
    fileId: {
      type: "string",
      nullable: true,
    },
    fileUniqueId: {
      type: "string",
      nullable: true,
    },
    fileSize: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    duration: {
      type: "integer",
      format: "int32",
    },
    mimeType: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const VpnDtoSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    productName: {
      type: "string",
      nullable: true,
    },
    productImage: {
      type: "string",
      nullable: true,
    },
    description: {
      type: "string",
      nullable: true,
    },
    price: {
      type: "integer",
      format: "int64",
    },
    days: {
      type: "integer",
      format: "int64",
    },
    serverId: {
      type: "integer",
      format: "int64",
      nullable: true,
    },
    numberUser: {
      type: "integer",
      format: "int64",
    },
  },
  additionalProperties: false,
} as const;

export const WebAppDataSchema = {
  type: "object",
  properties: {
    data: {
      type: "string",
      nullable: true,
    },
    buttonText: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const WebAppInfoSchema = {
  type: "object",
  properties: {
    url: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const WriteAccessAllowedSchema = {
  type: "object",
  properties: {
    webAppName: {
      type: "string",
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;
